{
  "openapi": "3.0.0",
  "paths": {
    "/v1/health-check": {
      "get": {
        "operationId": "health-check",
        "summary": "Get the health of the service",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "ok" },
                    "info": {
                      "type": "object",
                      "example": { "database": { "status": "up" } },
                      "additionalProperties": {
                        "type": "object",
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": { "type": "string" }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": { "type": "string" }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": { "database": { "status": "up" } },
                      "additionalProperties": {
                        "type": "object",
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "error" },
                    "info": {
                      "type": "object",
                      "example": { "database": { "status": "up" } },
                      "additionalProperties": {
                        "type": "object",
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": { "type": "string" }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": { "type": "string" }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": { "status": "up" },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": { "status": { "type": "string" } },
                        "additionalProperties": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["Health Check"]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/balances:getNative": {
      "get": {
        "operationId": "getNativeBalance",
        "summary": "Get native token balance",
        "description": "Gets native token balance of a wallet address.\n\nBalance at a given block can be retrieved with the `blockNumber` parameter.",
        "parameters": [
          {
            "name": "blockNumber",
            "required": false,
            "in": "query",
            "description": "The block number, if not defined the block number will be the latest block.",
            "example": "6479329",
            "schema": { "type": "string" }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": { "type": "string" }
          },
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "The currency that return values should use. Defaults to USD.",
            "example": "usd",
            "schema": { "$ref": "#/components/schemas/CurrencyCode" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNativeBalanceResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Balances"]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/balances:listErc20": {
      "get": {
        "operationId": "listErc20Balances",
        "summary": "List ERC-20 balances",
        "description": "Lists ERC-20 token balances of a wallet address.\n\nBalance at a given block can be retrieved with the `blockNumber` parameter.\n\nBalance for specific contracts can be retrieved with the `contractAddresses` parameter.",
        "parameters": [
          {
            "name": "blockNumber",
            "required": false,
            "in": "query",
            "description": "The block number, if not defined the block number will be the latest block.",
            "example": "6479329",
            "schema": { "type": "string" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": { "type": "string" }
          },
          {
            "name": "contractAddresses",
            "required": false,
            "in": "query",
            "description": "A comma separated list of contract addresses to filter by.",
            "example": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7, 0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB",
            "schema": { "type": "string" }
          },
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "The currency that return values should use. Defaults to USD.",
            "example": "usd",
            "schema": { "$ref": "#/components/schemas/CurrencyCode" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListErc20BalancesResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Balances"]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/balances:listErc721": {
      "get": {
        "operationId": "listErc721Balances",
        "summary": "List ERC-721 balances",
        "description": "Lists ERC-721 token balances of a wallet address.\n\nBalance for a specific contract can be retrieved with the `contractAddress` parameter.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": { "type": "string" }
          },
          {
            "name": "contractAddress",
            "required": false,
            "in": "query",
            "description": "A contract addresses to filter by.",
            "example": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListErc721BalancesResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Balances"]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/balances:listErc1155": {
      "get": {
        "operationId": "listErc1155Balances",
        "summary": "List ERC-1155 balances",
        "description": "Lists ERC-1155 token balances of a wallet address.\n\nBalance at a given block can be retrieved with the `blockNumber` parameter.\n\nBalance for a specific contract can be retrieved with the `contractAddress` parameter.",
        "parameters": [
          {
            "name": "blockNumber",
            "required": false,
            "in": "query",
            "description": "The block number, if not defined the block number will be the latest block.",
            "example": "6479329",
            "schema": { "type": "string" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": { "type": "string" }
          },
          {
            "name": "contractAddress",
            "required": false,
            "in": "query",
            "description": "A contract addresses to filter by.",
            "example": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListErc1155BalancesResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Balances"]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/balances:listCollectibles": {
      "get": {
        "operationId": "listCollectibleBalances",
        "summary": "List collectible (ERC-721/ERC-1155) balances",
        "description": "Lists ERC-721 and ERC-1155 token balances of a wallet address.\n\nBalance for a specific contract can be retrieved with the `contractAddress` parameter.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": { "type": "string" }
          },
          {
            "name": "contractAddress",
            "required": false,
            "in": "query",
            "description": "A contract addresses to filter by.",
            "example": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCollectibleBalancesResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Balances"]
      }
    },
    "/v1/chains/{chainId}/blocks": {
      "get": {
        "operationId": "getLatestBlocks",
        "summary": "List latest blocks",
        "description": "Lists the latest indexed blocks on the EVM-compatible chain sorted in descending order by block timestamp.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEvmBlocksResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Blocks"]
      }
    },
    "/v1/chains/{chainId}/blocks/{blockId}": {
      "get": {
        "operationId": "getBlock",
        "summary": "Get block",
        "description": "Gets the details of an individual block on the EVM-compatible chain.",
        "parameters": [
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "blockId",
            "required": true,
            "in": "path",
            "description": "A block identifier which is either a block number or the block hash.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetEvmBlockResponse" }
              }
            }
          }
        },
        "tags": ["EVM Blocks"]
      }
    },
    "/v1/chains/{chainId}/contracts/{address}/transactions:getDeployment": {
      "get": {
        "operationId": "getDeploymentTransaction",
        "summary": "Get deployment transaction",
        "description": "If the address is a smart contract, returns the transaction in which it was deployed.",
        "parameters": [
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Contract address on the relevant chain.",
            "example": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
            "schema": { "type": "string" }
          },
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "The currency that return values should use. Defaults to USD.",
            "example": "usd",
            "schema": { "$ref": "#/components/schemas/CurrencyCode" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Transactions"]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/deployments": {
      "get": {
        "operationId": "listContractDeployments",
        "summary": "List deployed contracts",
        "description": "Lists all contracts deployed by the given address.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListContractsResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Transactions"]
      }
    },
    "/v1/chains/{chainId}/contracts/{address}": {
      "patch": {
        "operationId": "updateContractInfo",
        "summary": "Update contract information",
        "description": "Update contract information. Updates will be reviewed by the Ava Labs team before they are published.",
        "parameters": [
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Contract address on the relevant chain.",
            "example": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractSubmissionBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateContractResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Contracts"]
      }
    },
    "/v1/chains": {
      "get": {
        "operationId": "supportedChains",
        "summary": "List chains",
        "description": "Lists the supported EVM-compatible chains. Filterable by network.",
        "parameters": [
          {
            "name": "network",
            "required": false,
            "in": "query",
            "description": "mainnet or testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/NetworkType" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListChainsResponse" }
              }
            }
          }
        },
        "tags": ["EVM Chains"]
      }
    },
    "/v1/chains/{chainId}": {
      "get": {
        "operationId": "getChainInfo",
        "summary": "Get chain information",
        "description": "Gets chain information for the EVM-compatible chain if supported by the api.",
        "parameters": [
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetChainResponse" }
              }
            }
          }
        },
        "tags": ["EVM Chains"]
      }
    },
    "/v1/operations/transactions:export": {
      "post": {
        "operationId": "postTransactionExportJob",
        "summary": "Create transaction export operation",
        "description": "Trigger a transaction export operation with given parameters.\n\nThe transaction export operation runs asynchronously in the background. The status of the job can be retrieved from the `/v1/operations/:operationId` endpoint using the `operationId` returned from this endpoint.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateEvmTransactionExportRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreatePrimaryNetworkTransactionExportRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationStatusResponse"
                }
              }
            }
          }
        },
        "tags": ["Operations"]
      }
    },
    "/v1/operations/{operationId}": {
      "get": {
        "operationId": "getOperationResult",
        "summary": "Get operation",
        "description": "Gets operation details for the given operation id.",
        "parameters": [
          {
            "name": "operationId",
            "required": true,
            "in": "path",
            "description": "UUID of given operation",
            "example": "aa22054a-cb7c-4a4e-9b83-59f2ede74138",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationStatusResponse"
                }
              }
            }
          }
        },
        "tags": ["Operations"]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/transactions/{txHash}": {
      "get": {
        "operationId": "getTxByHash",
        "summary": "Get transaction",
        "description": "Gets the details of a single transaction on one of the Primary Network chains.",
        "parameters": [
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A primary network blockchain id or alias.",
            "example": "p-chain",
            "schema": { "$ref": "#/components/schemas/BlockchainId" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          },
          {
            "name": "txHash",
            "required": true,
            "in": "path",
            "description": "A primary network (P or X chain) transaction hash.",
            "example": "3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/PChainTransaction" },
                    {
                      "$ref": "#/components/schemas/XChainNonLinearTransaction"
                    },
                    { "$ref": "#/components/schemas/XChainLinearTransaction" },
                    { "$ref": "#/components/schemas/CChainExportTransaction" },
                    { "$ref": "#/components/schemas/CChainImportTransaction" }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Primary Network Transactions"]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/transactions": {
      "get": {
        "operationId": "listLatestPrimaryNetworkTransactions",
        "summary": "List latest transactions",
        "description": "Lists the latest transactions on one of the Primary Network chains. Transactions are filterable by addresses.",
        "parameters": [
          {
            "name": "addresses",
            "required": false,
            "in": "query",
            "description": "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"lux\"/\"fuji\", \"P-lux\"/\"P-fuji\" or \"X-lux\"/\"X-fuji\".",
            "example": "lux1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
            "schema": { "type": "string" }
          },
          {
            "name": "txTypes",
            "required": false,
            "in": "query",
            "example": "AddValidatorTx",
            "description": "Query param for filtering items based on transaction types.",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/PrimaryNetworkTxType" }
            }
          },
          {
            "name": "startTimestamp",
            "required": false,
            "in": "query",
            "description": "Query param for retrieving items after a specific timestamp.",
            "example": 1689541049,
            "schema": { "minimum": 0, "type": "integer" }
          },
          {
            "name": "endTimestamp",
            "required": false,
            "in": "query",
            "description": "Query param for retrieving items before a specific timestamp.",
            "example": 1689800249,
            "schema": { "minimum": 0, "type": "integer" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A primary network blockchain id or alias.",
            "example": "p-chain",
            "schema": { "$ref": "#/components/schemas/BlockchainId" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.",
            "schema": { "$ref": "#/components/schemas/SortOrder" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ListPChainTransactionsResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ListXChainTransactionsResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ListCChainAtomicTransactionsResponse"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Primary Network Transactions"]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/transactions:listStaking": {
      "get": {
        "operationId": "listActivePrimaryNetworkStakingTransactions",
        "summary": "List staking transactions",
        "description": "Lists active staking transactions on the P-Chain for the supplied addresses.",
        "parameters": [
          {
            "name": "addresses",
            "required": false,
            "in": "query",
            "description": "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"lux\"/\"fuji\", \"P-lux\"/\"P-fuji\" or \"X-lux\"/\"X-fuji\".",
            "example": "lux1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
            "schema": { "type": "string" }
          },
          {
            "name": "txTypes",
            "required": false,
            "in": "query",
            "example": "AddValidatorTx",
            "description": "Query param for filtering items based on transaction types.",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/PrimaryNetworkTxType" }
            }
          },
          {
            "name": "startTimestamp",
            "required": false,
            "in": "query",
            "description": "Query param for retrieving items after a specific timestamp.",
            "example": 1689541049,
            "schema": { "minimum": 0, "type": "integer" }
          },
          {
            "name": "endTimestamp",
            "required": false,
            "in": "query",
            "description": "Query param for retrieving items before a specific timestamp.",
            "example": 1689800249,
            "schema": { "minimum": 0, "type": "integer" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A primary network blockchain id or alias.",
            "example": "p-chain",
            "schema": { "$ref": "#/components/schemas/PChainId" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.",
            "schema": { "$ref": "#/components/schemas/SortOrder" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPChainTransactionsResponse"
                }
              }
            }
          }
        },
        "tags": ["Primary Network Transactions"]
      }
    },
    "/v1/networks/{network}/rewards:listPending": {
      "get": {
        "operationId": "listPendingPrimaryNetworkRewards",
        "summary": "List pending rewards",
        "description": "Lists pending rewards on the Primary Network for the supplied addresses.",
        "parameters": [
          {
            "name": "addresses",
            "required": false,
            "in": "query",
            "description": "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"lux\"/\"fuji\", \"P-lux\"/\"P-fuji\" or \"X-lux\"/\"X-fuji\".",
            "example": "lux1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
            "schema": { "type": "string" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.",
            "schema": { "$ref": "#/components/schemas/SortOrder" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPendingRewardsResponse"
                }
              }
            }
          }
        },
        "tags": ["Primary Network Rewards"]
      }
    },
    "/v1/networks/{network}/rewards": {
      "get": {
        "operationId": "listHistoricalPrimaryNetworkRewards",
        "summary": "List historical rewards",
        "description": "Lists historical rewards on the Primary Network for the supplied addresses.",
        "parameters": [
          {
            "name": "addresses",
            "required": false,
            "in": "query",
            "description": "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"lux\"/\"fuji\", \"P-lux\"/\"P-fuji\" or \"X-lux\"/\"X-fuji\".",
            "example": "lux1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
            "schema": { "type": "string" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.",
            "schema": { "$ref": "#/components/schemas/SortOrder" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListHistoricalRewardsResponse"
                }
              }
            }
          }
        },
        "tags": ["Primary Network Rewards"]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/utxos": {
      "get": {
        "operationId": "getUtxosByAddresses",
        "summary": "List UTXOs",
        "description": "Lists UTXOs on one of the Primary Network chains for the supplied addresses.",
        "parameters": [
          {
            "name": "addresses",
            "required": false,
            "in": "query",
            "description": "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"lux\"/\"fuji\", \"P-lux\"/\"P-fuji\" or \"X-lux\"/\"X-fuji\".",
            "example": "lux1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
            "schema": { "type": "string" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A primary network blockchain id or alias.",
            "example": "p-chain",
            "schema": { "$ref": "#/components/schemas/BlockchainId" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          },
          {
            "name": "assetId",
            "required": false,
            "in": "query",
            "description": "Asset ID for any asset (only applicable X-Chain)",
            "schema": { "type": "string" }
          },
          {
            "name": "includeSpent",
            "required": false,
            "in": "query",
            "description": "Boolean filter to include spent UTXOs.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.",
            "schema": { "$ref": "#/components/schemas/SortOrder" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/ListPChainUtxosResponse" },
                    { "$ref": "#/components/schemas/ListUtxosResponse" }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Primary Network UTXOs"]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/balances": {
      "get": {
        "operationId": "getBalancesByAddresses",
        "summary": "Get balances",
        "description": "Gets primary network balances for one of the Primary Network chains for the supplied addresses.\n\nC-Chain balances returned are only the shared atomic memory balance. For EVM balance, use the `/v1/chains/:chainId/addresses/:addressId/balances:getNative` endpoint.",
        "parameters": [
          {
            "name": "blockTimestamp",
            "required": false,
            "in": "query",
            "description": "An epoch timestamp in seconds. Balance will be calculated at this timestamp.",
            "example": "1599696000",
            "schema": { "type": "integer" }
          },
          {
            "name": "addresses",
            "required": false,
            "in": "query",
            "description": "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"lux\"/\"fuji\", \"P-lux\"/\"P-fuji\" or \"X-lux\"/\"X-fuji\".",
            "example": "lux1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
            "schema": { "type": "string" }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A primary network blockchain id or alias.",
            "example": "p-chain",
            "schema": { "$ref": "#/components/schemas/BlockchainId" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ListPChainBalancesResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ListXChainBalancesResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ListCChainAtomicBalancesResponse"
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Primary Network Balances"]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/blocks/{blockId}": {
      "get": {
        "operationId": "getBlockById",
        "summary": "Get block",
        "description": "Gets a block by block height or block hash on one of the Primary Network chains.",
        "parameters": [
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A primary network blockchain id or alias.",
            "example": "p-chain",
            "schema": { "$ref": "#/components/schemas/BlockchainId" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          },
          {
            "name": "blockId",
            "required": true,
            "in": "path",
            "description": "A block identifier which is either a block number or the block hash.",
            "example": "5615di9ytxujackzaXNrVuWQy5y8Yrt8chPCscMr5Ku9YxJ1S",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPrimaryNetworkBlockResponse"
                }
              }
            }
          }
        },
        "tags": ["Primary Network Blocks"]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/nodes/{nodeId}/blocks": {
      "get": {
        "operationId": "listPrimaryNetworkBlocksByNodeId",
        "summary": "List blocks proposed by node",
        "description": "Lists the latest blocks proposed by a given NodeID on one of the Primary Network chains.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A primary network blockchain id or alias.",
            "example": "p-chain",
            "schema": { "$ref": "#/components/schemas/BlockchainId" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          },
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "description": "A primary network (P or X chain) nodeId.",
            "example": "NodeID-111111111111111111116DBWJs",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPrimaryNetworkBlocksResponse"
                }
              }
            }
          }
        },
        "tags": ["Primary Network Blocks"]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/blocks": {
      "get": {
        "operationId": "listLatestPrimaryNetworkBlocks",
        "summary": "List latest blocks",
        "description": "Lists latest blocks on one of the Primary Network chains.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A primary network blockchain id or alias.",
            "example": "p-chain",
            "schema": { "$ref": "#/components/schemas/BlockchainId" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPrimaryNetworkBlocksResponse"
                }
              }
            }
          }
        },
        "tags": ["Primary Network Blocks"]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/vertices": {
      "get": {
        "operationId": "listLatestXChainVertices",
        "summary": "List vertices",
        "description": "Lists latest vertices on the X-Chain.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A primary network blockchain id or alias.",
            "example": "x-chain",
            "schema": { "$ref": "#/components/schemas/XChainId" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListXChainVerticesResponse"
                }
              }
            }
          }
        },
        "tags": ["Primary Network Vertices"]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/vertices/{vertexHash}": {
      "get": {
        "operationId": "getVertexByHash",
        "summary": "Get vertex",
        "description": "Gets a single vertex on the X-Chain.",
        "parameters": [
          {
            "name": "vertexHash",
            "required": true,
            "in": "path",
            "description": "A vertex hash string.",
            "example": "haP1CW56cspZY7aEuqHNrtpvhqCaMTxQaYe6j5u2Mbn4L2Gqr",
            "schema": { "type": "string" }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A primary network blockchain id or alias.",
            "example": "x-chain",
            "schema": { "$ref": "#/components/schemas/XChainId" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/XChainVertex" }
              }
            }
          }
        },
        "tags": ["Primary Network Vertices"]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/vertices:listByHeight": {
      "get": {
        "operationId": "getVertexByHeight",
        "summary": "List vertices by height",
        "description": "Lists vertices at the given vertex height on the X-Chain.",
        "parameters": [
          {
            "name": "vertexHeight",
            "required": true,
            "in": "query",
            "description": "The height of a vertex.",
            "schema": { "type": "integer", "minimum": 0 },
            "example": 123
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A primary network blockchain id or alias.",
            "example": "x-chain",
            "schema": { "$ref": "#/components/schemas/XChainId" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.",
            "schema": { "$ref": "#/components/schemas/SortOrder" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListXChainVerticesResponse"
                }
              }
            }
          }
        },
        "tags": ["Primary Network Vertices"]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/assets/{assetId}": {
      "get": {
        "operationId": "getAssetDetails",
        "summary": "Get asset details",
        "description": "Gets asset details corresponding to the given asset id on the X-Chain.",
        "parameters": [
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A primary network blockchain id or alias.",
            "example": "x-chain",
            "schema": { "$ref": "#/components/schemas/XChainId" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          },
          {
            "name": "assetId",
            "required": true,
            "in": "path",
            "description": "Asset ID for any asset on X-Chain",
            "example": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/XChainAssetDetails" }
              }
            }
          }
        },
        "tags": ["Primary Network"]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/assets/{assetId}/transactions": {
      "get": {
        "operationId": "listAssetTransactions",
        "summary": "List asset transactions",
        "description": "Lists asset transactions corresponding to the given asset id on the X-Chain.",
        "parameters": [
          {
            "name": "txTypes",
            "required": false,
            "in": "query",
            "example": "AddValidatorTx",
            "description": "Query param for filtering items based on transaction types.",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/PrimaryNetworkTxType" }
            }
          },
          {
            "name": "startTimestamp",
            "required": false,
            "in": "query",
            "description": "Query param for retrieving items after a specific timestamp.",
            "schema": { "minimum": 0, "type": "integer" }
          },
          {
            "name": "endTimestamp",
            "required": false,
            "in": "query",
            "description": "Query param for retrieving items before a specific timestamp.",
            "schema": { "minimum": 0, "type": "integer" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A primary network blockchain id or alias.",
            "example": "x-chain",
            "schema": { "$ref": "#/components/schemas/XChainId" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          },
          {
            "name": "assetId",
            "required": true,
            "in": "path",
            "description": "Asset ID for any asset on X-Chain",
            "example": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListXChainTransactionsResponse"
                }
              }
            }
          }
        },
        "tags": ["Primary Network Transactions"]
      }
    },
    "/v1/networks/{network}/addresses:listChainIds": {
      "get": {
        "operationId": "getChainIdsForAddresses",
        "summary": "Get chain interactions for addresses",
        "description": "Returns Primary Network chains that each address has touched in the form of an address mapped array. If an address has had any on-chain interaction for a chain, that chain's chain id will be returned.",
        "parameters": [
          {
            "name": "addresses",
            "required": true,
            "in": "query",
            "description": "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"lux\"/\"fuji\", \"P-lux\"/\"P-fuji\" or \"X-lux\"/\"X-fuji\".",
            "example": "lux1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
            "schema": { "type": "string" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainAddressChainIdMapListResponse"
                }
              }
            }
          }
        },
        "tags": ["Primary Network"]
      }
    },
    "/v1/chains/{chainId}/tokens/{address}/transfers": {
      "get": {
        "operationId": "listTransfers",
        "summary": "List ERC transfers",
        "description": "Lists ERC transfers for an ERC-20, ERC-721, or ERC-1155 contract address.",
        "parameters": [
          {
            "name": "startBlock",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "endBlock",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTransfersResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Transactions"]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/transactions": {
      "get": {
        "operationId": "listTransactions",
        "summary": "List transactions",
        "description": "Returns a list of transactions where the given wallet address had an on-chain interaction for the given chain. The ERC-20 transfers, ERC-721 transfers, ERC-1155, and internal transactions returned are only those where the input address had an interaction. Specifically, those lists only inlcude entries where the input address was the sender (`from` field) or the receiver (`to` field) for the sub-transaction. Therefore the transactions returned from this list may not be complete representations of the on-chain data. For a complete view of a transaction use the `/chains/:chainId/transactions/:txHash` endpoint.\n\nFilterable by block ranges.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "startBlock",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "endBlock",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": { "type": "string" }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.",
            "schema": { "$ref": "#/components/schemas/SortOrder" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTransactionDetailsResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Transactions"]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/transactions:listNative": {
      "get": {
        "operationId": "listNativeTransactions",
        "summary": "List native transactions",
        "description": "Lists native transactions for an address. Filterable by block range.",
        "parameters": [
          {
            "name": "startBlock",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "endBlock",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNativeTransactionsResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Transactions"]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/transactions:listErc20": {
      "get": {
        "operationId": "listErc20Transactions",
        "summary": "List ERC-20 transfers",
        "description": "Lists ERC-20 transfers for an address. Filterable by block range.",
        "parameters": [
          {
            "name": "startBlock",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "endBlock",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListErc20TransactionsResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Transactions"]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/transactions:listErc721": {
      "get": {
        "operationId": "listErc721Transactions",
        "summary": "List ERC-721 transfers",
        "description": "Lists ERC-721 transfers for an address. Filterable by block range.",
        "parameters": [
          {
            "name": "startBlock",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "endBlock",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListErc721TransactionsResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Transactions"]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/transactions:listErc1155": {
      "get": {
        "operationId": "listErc1155Transactions",
        "summary": "List ERC-1155 transfers",
        "description": "Lists ERC-1155 transfers for an address. Filterable by block range.",
        "parameters": [
          {
            "name": "startBlock",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "endBlock",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListErc1155TransactionsResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Transactions"]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/transactions:listInternals": {
      "get": {
        "operationId": "listInternalTransactions",
        "summary": "List internal transactions",
        "description": "Returns a list of internal transactions for an address and chain. Filterable by block range.\n\nNote that the internal transactions list only contains `CALL` or `CALLCODE` transactions with a non-zero value and `CREATE`/`CREATE2` transactions. To get a complete list of internal transactions use the `debug_` prefixed RPC methods on an archive node.",
        "parameters": [
          {
            "name": "startBlock",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "endBlock",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListInternalTransactionsResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Transactions"]
      }
    },
    "/v1/chains/{chainId}/transactions/{txHash}": {
      "get": {
        "operationId": "getTransaction",
        "summary": "Get transaction",
        "description": "Gets the details of a single transaction.",
        "parameters": [
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "txHash",
            "required": true,
            "in": "path",
            "description": "A transaction hash.",
            "example": "0x8bf584d7b14b92a32a339872a66b134a70ba3ba7c305823f348db6f860253f45",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Transactions"]
      }
    },
    "/v1/chains/{chainId}/blocks/{blockId}/transactions": {
      "get": {
        "operationId": "getTransactionsForBlock",
        "summary": "List transactions for a block",
        "description": "Lists the transactions that occured in a given block.",
        "parameters": [
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "blockId",
            "required": true,
            "in": "path",
            "description": "A block identifier which is either a block number or the block hash.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNativeTransactionsResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Transactions"]
      }
    },
    "/v1/chains/{chainId}/transactions": {
      "get": {
        "operationId": "listLatestTransactions",
        "summary": "List latest transactions",
        "description": "Lists the latest transactions. Filterable by status.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "A status filter for listed transactions.",
            "schema": { "$ref": "#/components/schemas/TransactionStatus" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNativeTransactionsResponse"
                }
              }
            }
          }
        },
        "tags": ["EVM Transactions"]
      }
    },
    "/v1/chains/{chainId}/nfts/collections/{address}/tokens/{tokenId}:reindex": {
      "post": {
        "operationId": "reindexNft",
        "summary": "Triggers reindexing for a single nft contract and token id pair",
        "description": "Triggers reindexing of token metadata for nft contracts.\n        Will throw 400 if Nft has been indexed within the last hour.",
        "parameters": [
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Contract address on the relevant chain.",
            "example": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
            "schema": { "type": "string" }
          },
          {
            "name": "tokenId",
            "required": true,
            "in": "path",
            "description": "TokenId on the contract",
            "example": "145",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["NFTs"]
      }
    },
    "/v1/chains/{chainId}/nfts/collections/{address}/tokens/{tokenId}": {
      "get": {
        "operationId": "getTokenDetails",
        "summary": "Get token details",
        "description": "Get token details for a specific token of a contract.",
        "parameters": [
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Contract address on the relevant chain.",
            "example": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
            "schema": { "type": "string" }
          },
          {
            "name": "tokenId",
            "required": true,
            "in": "path",
            "description": "TokenId on the contract",
            "example": "145",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/Erc721Token" },
                    { "$ref": "#/components/schemas/Erc1155Token" }
                  ]
                }
              }
            }
          }
        },
        "tags": ["NFTs"]
      }
    },
    "/v1/chains/{chainId}/nfts/collections/{address}": {
      "get": {
        "operationId": "getCollection",
        "summary": "Get collection details",
        "description": "Get collection details for a specific contract.",
        "parameters": [
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids.",
            "example": "43114",
            "schema": { "type": "string" }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Contract address on the relevant chain.",
            "example": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/Erc721Contract" },
                    { "$ref": "#/components/schemas/Erc1155Contract" }
                  ]
                }
              }
            }
          }
        },
        "tags": ["NFTs"]
      }
    },
    "/v1/networks/{network}": {
      "get": {
        "operationId": "getNetworkDetails",
        "summary": "Get network details",
        "description": "Gets network details such as validator and delegator stats.",
        "parameters": [
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNetworkDetailsResponse"
                }
              }
            }
          }
        },
        "tags": ["Primary Network"]
      }
    },
    "/v1/networks/{network}/blockchains": {
      "get": {
        "operationId": "listBlockchains",
        "summary": "List blockchains",
        "description": "Lists all blockchains registered on the network.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.",
            "schema": { "$ref": "#/components/schemas/SortOrder" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBlockchainsResponse"
                }
              }
            }
          }
        },
        "tags": ["Primary Network"]
      }
    },
    "/v1/networks/{network}/subnets": {
      "get": {
        "operationId": "listSubnets",
        "summary": "List subnets",
        "description": "Lists all subnets registered on the network.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.",
            "schema": { "$ref": "#/components/schemas/SortOrder" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListSubnetsResponse" }
              }
            }
          }
        },
        "tags": ["Primary Network"]
      }
    },
    "/v1/networks/{network}/validators": {
      "get": {
        "operationId": "listValidators",
        "summary": "List validators",
        "description": "Lists details for validators. By default, returns details for all validators. Filterable by validator node ids and minimum delegation capacity.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          },
          {
            "name": "nodeIds",
            "required": false,
            "in": "query",
            "description": "A comma separated list of node ids to filter by.",
            "example": "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs",
            "schema": { "type": "string" }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.",
            "schema": { "$ref": "#/components/schemas/SortOrder" }
          },
          {
            "name": "validationStatus",
            "required": false,
            "in": "query",
            "description": "Validation status of the node.",
            "example": "completed",
            "schema": { "$ref": "#/components/schemas/ValidationStatusType" }
          },
          {
            "name": "minDelegationCapacity",
            "required": false,
            "in": "query",
            "description": "The minimum delegation capacity, used to filter the set of nodes being returned (Units - nLUX). Default is 0.",
            "example": "2000",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListValidatorDetailsResponse"
                }
              }
            }
          }
        },
        "tags": ["Primary Network"]
      }
    },
    "/v1/networks/{network}/validators/{nodeId}": {
      "get": {
        "operationId": "getSingleValidatorDetails",
        "summary": "Get single validator details",
        "description": "List validator details for a single validator.  Filterable by validation status.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          },
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "description": "A primary network (P or X chain) nodeId.",
            "example": "NodeID-111111111111111111116DBWJs",
            "schema": { "type": "string" }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.",
            "schema": { "$ref": "#/components/schemas/SortOrder" }
          },
          {
            "name": "validationStatus",
            "required": false,
            "in": "query",
            "description": "Validation status of the node.",
            "example": "completed",
            "schema": { "$ref": "#/components/schemas/ValidationStatusType" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListValidatorDetailsResponse"
                }
              }
            }
          }
        },
        "tags": ["Primary Network"]
      }
    },
    "/v1/networks/{network}/delegators": {
      "get": {
        "operationId": "listDelegators",
        "summary": "List delegators",
        "description": "Lists details for delegators.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": { "type": "string" }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": { "$ref": "#/components/schemas/Network" }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.",
            "schema": { "$ref": "#/components/schemas/SortOrder" }
          },
          {
            "name": "delegationStatus",
            "required": false,
            "in": "query",
            "description": "Delegation status of the node.",
            "example": "completed",
            "schema": { "$ref": "#/components/schemas/DelegationStatusType" }
          },
          {
            "name": "rewardAddresses",
            "required": false,
            "in": "query",
            "description": "A comma separated list of reward addresses to filter by.",
            "example": "P-lux1679zrp3z9mf7z4an42ddq47qzj36zv6ga20vwl,P-lux1s7kd0kfndlz6mh3l0etrrcmkg5y366k8e0s6cc",
            "schema": { "type": "string" }
          },
          {
            "name": "nodeIds",
            "required": false,
            "in": "query",
            "description": "A comma separated list of node ids to filter by.",
            "example": "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDelegatorDetailsResponse"
                }
              }
            }
          }
        },
        "tags": ["Primary Network"]
      }
    },
    "/v1/media/uploadImage": {
      "post": {
        "operationId": "MediaController_uploadImage",
        "parameters": [],
        "responses": { "201": { "description": "" } }
      }
    }
  },
  "info": {
    "title": "Aurora API",
    "description": "The Aurora API provides web3 application developers with multi-chain data related to Lux's primary network, Lux subnets, and Ethereum. With Aurora, you can easily build products that leverage real-time and historical transaction and transfer history, native and token balances, and various types of token metadata. The API is in Beta and may be subject to change.</br></br>If you have feedback or feature requests for the API, please submit them <a href=\"https://portal.productboard.com/dndv9ahlkdfye4opdm8ksafi/tabs/4-aurora-api\">here</a>. Bug reports can be submitted <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSeJQrcp7QoNiqozMDKrVJGX5wpU827d3cVTgF8qa7t_J1Pb-g/viewform\">here</a>, and any potential security issues can be reported <a href=\"https://hackenproof.com/avalanche\">here</a>.",
    "version": "Beta",
    "contact": {}
  },
  "tags": [
    {
      "name": "EVM Chains",
      "description": "Find information about indexed EVM-compatible chains, such as the Lux C-Chain."
    },
    {
      "name": "EVM Blocks",
      "description": "Find information about blocks on EVM-compatible chains, such as the Lux C-Chain."
    },
    {
      "name": "EVM Transactions",
      "description": "Find information about transactions on EVM-compatible chains, such as the Lux C-Chain."
    },
    {
      "name": "EVM Balances",
      "description": "Find information about balances on EVM-compatible chains, such as the Lux C-Chain."
    },
    {
      "name": "EVM Contracts",
      "description": "Find information about contracts on EVM-compatible chains, such as the Lux C-Chain."
    },
    { "name": "Primary Network", "description": "" },
    {
      "name": "Primary Network Blocks",
      "description": "Find information about blocks on Lux's Primary Network Chains - the P-Chain, the X-Chain, and the C-Chain."
    },
    {
      "name": "Primary Network Vertices",
      "description": "Find information about vertices on Lux's X-Chain."
    },
    {
      "name": "Primary Network Transactions",
      "description": "Find information about transactions on Lux's Primary Network Chains - the P-Chain, the X-Chain, and the C-Chain."
    },
    {
      "name": "Primary Network Balances",
      "description": "Find information about balances on Lux's Primary Network Chains - the P-Chain, the X-Chain, and the C-Chain."
    },
    {
      "name": "Primary Network UTXOs",
      "description": "Find information about utxos on Lux's Primary Network Chains - the P-Chain, the X-Chain, and the C-Chain."
    },
    {
      "name": "Primary Network Rewards",
      "description": "Find information about rewards on Lux's Primary Network."
    },
    { "name": "NFTs", "description": "" },
    { "name": "Operations", "description": "" },
    { "name": "Health Check", "description": "" }
  ],
  "servers": [{ "url": "http://localhost:3000" }],
  "components": {
    "securitySchemes": {
      "x-aurora-api-key": {
        "type": "apiKey",
        "in": "header",
        "name": "x-aurora-api-key",
        "description": "Api keys provide higher access to rate limits. To obtain an api key, sign up for an account at https://avacloud.io/."
      }
    },
    "schemas": {
      "CurrencyCode": {
        "type": "string",
        "enum": [
          "usd",
          "eur",
          "aud",
          "cad",
          "chf",
          "clp",
          "cny",
          "czk",
          "dkk",
          "gbp",
          "hkd",
          "huf",
          "jpy",
          "nzd"
        ]
      },
      "Money": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "description": "ISO 4217 currency code.",
            "example": "usd",
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "value": {
            "type": "number",
            "description": "Monetary value in base 10 decimals.",
            "example": "42.42"
          }
        },
        "required": ["currencyCode", "value"]
      },
      "NativeTokenBalance": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped LUX"
          },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WLUX"
          },
          "decimals": {
            "type": "number",
            "description": "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation.",
            "example": 18
          },
          "logoUri": {
            "type": "string",
            "description": "The logo uri for the address.",
            "example": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-lux-logo.svg"
          },
          "chainId": {
            "type": "string",
            "description": "The evm chain id.",
            "example": "43114"
          },
          "price": {
            "description": "The token price, if available.",
            "allOf": [{ "$ref": "#/components/schemas/Money" }]
          },
          "balance": {
            "type": "string",
            "description": "The address balance for the token, in units specified by the `decimals` value for the contract.",
            "example": "2000000000000000000"
          },
          "balanceValue": {
            "description": "The monetary value of the balance, if a price is available for the token.",
            "allOf": [{ "$ref": "#/components/schemas/Money" }]
          }
        },
        "required": ["name", "symbol", "decimals", "chainId", "balance"]
      },
      "GetNativeBalanceResponse": {
        "type": "object",
        "properties": {
          "nativeTokenBalance": {
            "description": "The native token balance for the address.",
            "allOf": [{ "$ref": "#/components/schemas/NativeTokenBalance" }]
          }
        },
        "required": ["nativeTokenBalance"]
      },
      "Erc20TokenBalance": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped LUX"
          },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WLUX"
          },
          "decimals": {
            "type": "number",
            "description": "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation.",
            "example": 18
          },
          "logoUri": {
            "type": "string",
            "description": "The logo uri for the address.",
            "example": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-lux-logo.svg"
          },
          "ercType": { "type": "string", "enum": ["ERC-20"] },
          "price": {
            "description": "The token price, if available.",
            "allOf": [{ "$ref": "#/components/schemas/Money" }]
          },
          "chainId": {
            "type": "string",
            "description": "The evm chain id.",
            "example": "43114"
          },
          "balance": {
            "type": "string",
            "description": "The address balance for the token, in units specified by the `decimals` value for the contract.",
            "example": "2000000000000000000"
          },
          "balanceValue": {
            "description": "The monetary value of the balance, if a price is available for the token.",
            "allOf": [{ "$ref": "#/components/schemas/Money" }]
          }
        },
        "required": [
          "address",
          "name",
          "symbol",
          "decimals",
          "ercType",
          "chainId",
          "balance"
        ]
      },
      "ListErc20BalancesResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "erc20TokenBalances": {
            "description": "The list of ERC-20 token balances for the address.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Erc20TokenBalance" }
          }
        },
        "required": ["erc20TokenBalances"]
      },
      "NftTokenMetadataStatus": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "MISSING_TOKEN",
          "INVALID_TOKEN_URI",
          "INVALID_TOKEN_URI_SCHEME",
          "UNREACHABLE_TOKEN_URI",
          "THROTTLED_TOKEN_URI",
          "METADATA_CONTENT_TOO_LARGE",
          "INVALID_METADATA",
          "INVALID_METADATA_JSON",
          "INDEXED",
          "UNINDEXED"
        ]
      },
      "Erc721TokenMetadata": {
        "type": "object",
        "properties": {
          "indexStatus": {
            "description": "The metadata indexing status of the nft.",
            "example": "indexed",
            "$ref": "#/components/schemas/NftTokenMetadataStatus"
          },
          "metadataLastUpdatedTimestamp": { "type": "number" },
          "name": { "type": "string" },
          "symbol": { "type": "string" },
          "imageUri": { "type": "string" },
          "description": { "type": "string" },
          "animationUri": { "type": "string" },
          "externalUrl": { "type": "string" },
          "background": { "type": "string" },
          "attributes": { "type": "string" }
        },
        "required": ["indexStatus"]
      },
      "Erc721TokenBalance": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped LUX"
          },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WLUX"
          },
          "ercType": { "type": "string", "enum": ["ERC-721"] },
          "tokenId": { "type": "string" },
          "tokenUri": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/Erc721TokenMetadata" },
          "ownerAddress": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "chainId": {
            "type": "string",
            "description": "The evm chain id.",
            "example": "43114"
          }
        },
        "required": [
          "address",
          "name",
          "symbol",
          "ercType",
          "tokenId",
          "tokenUri",
          "metadata",
          "chainId"
        ]
      },
      "ListErc721BalancesResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "erc721TokenBalances": {
            "description": "The list of ERC-721 token balances for the address.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Erc721TokenBalance" }
          }
        },
        "required": ["erc721TokenBalances"]
      },
      "Erc1155TokenMetadata": {
        "type": "object",
        "properties": {
          "indexStatus": {
            "description": "The metadata indexing status of the nft.",
            "example": "indexed",
            "$ref": "#/components/schemas/NftTokenMetadataStatus"
          },
          "metadataLastUpdatedTimestamp": { "type": "number" },
          "name": { "type": "string" },
          "symbol": { "type": "string" },
          "imageUri": { "type": "string" },
          "description": { "type": "string" },
          "animationUri": { "type": "string" },
          "externalUrl": { "type": "string" },
          "background": { "type": "string" },
          "decimals": { "type": "number" },
          "properties": { "type": "string" }
        },
        "required": ["indexStatus"]
      },
      "Erc1155TokenBalance": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "ercType": { "type": "string", "enum": ["ERC-1155"] },
          "tokenId": { "type": "string" },
          "tokenUri": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/Erc1155TokenMetadata" },
          "chainId": {
            "type": "string",
            "description": "The evm chain id.",
            "example": "43114"
          },
          "balance": {
            "type": "string",
            "description": "The address balance for the token, in units specified by the `decimals` value for the contract.",
            "example": "2000000000000000000"
          }
        },
        "required": [
          "address",
          "ercType",
          "tokenId",
          "tokenUri",
          "metadata",
          "chainId",
          "balance"
        ]
      },
      "ListErc1155BalancesResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "erc1155TokenBalances": {
            "description": "The list of ERC-1155 token balances for the address.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Erc1155TokenBalance" }
          }
        },
        "required": ["erc1155TokenBalances"]
      },
      "ListCollectibleBalancesResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "collectibleBalances": {
            "type": "array",
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/Erc721TokenBalance" },
                { "$ref": "#/components/schemas/Erc1155TokenBalance" }
              ]
            },
            "description": "The list of ERC-721 and ERC-1155 token balances for the address."
          }
        },
        "required": ["collectibleBalances"]
      },
      "EvmBlock": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The block number on the chain.",
            "example": "339"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockHash": {
            "type": "string",
            "description": "The block hash identifier.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
          },
          "txCount": {
            "type": "number",
            "description": "The number of evm transactions in the block."
          },
          "baseFee": {
            "type": "string",
            "description": "The base gas fee for a transaction to be included in the block."
          },
          "gasUsed": {
            "type": "string",
            "description": "The gas used for transactions in the block."
          },
          "gasLimit": {
            "type": "string",
            "description": "The total gas limit set for transactions in the block."
          },
          "gasCost": { "type": "string" },
          "parentHash": {
            "type": "string",
            "description": "The hash of the parent block."
          },
          "feesSpent": {
            "type": "string",
            "description": "The amount of fees spent/burned for transactions in the block."
          },
          "cumulativeTransactions": {
            "type": "string",
            "description": "The cumulative number of transactions for the chain including this block."
          }
        },
        "required": [
          "blockNumber",
          "blockTimestamp",
          "blockHash",
          "txCount",
          "baseFee",
          "gasUsed",
          "gasLimit",
          "gasCost",
          "parentHash",
          "feesSpent",
          "cumulativeTransactions"
        ]
      },
      "ListEvmBlocksResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "blocks": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EvmBlock" }
          }
        },
        "required": ["blocks"]
      },
      "GetEvmBlockResponse": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The block number on the chain.",
            "example": "339"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockHash": {
            "type": "string",
            "description": "The block hash identifier.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
          },
          "txCount": {
            "type": "number",
            "description": "The number of evm transactions in the block."
          },
          "baseFee": {
            "type": "string",
            "description": "The base gas fee for a transaction to be included in the block."
          },
          "gasUsed": {
            "type": "string",
            "description": "The gas used for transactions in the block."
          },
          "gasLimit": {
            "type": "string",
            "description": "The total gas limit set for transactions in the block."
          },
          "gasCost": { "type": "string" },
          "parentHash": {
            "type": "string",
            "description": "The hash of the parent block."
          },
          "feesSpent": {
            "type": "string",
            "description": "The amount of fees spent/burned for transactions in the block."
          },
          "cumulativeTransactions": {
            "type": "string",
            "description": "The cumulative number of transactions for the chain including this block."
          }
        },
        "required": [
          "blockNumber",
          "blockTimestamp",
          "blockHash",
          "txCount",
          "baseFee",
          "gasUsed",
          "gasLimit",
          "gasCost",
          "parentHash",
          "feesSpent",
          "cumulativeTransactions"
        ]
      },
      "RichAddress": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped LUX"
          },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WLUX"
          },
          "decimals": {
            "type": "number",
            "description": "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation.",
            "example": 18
          },
          "logoUri": {
            "type": "string",
            "description": "The logo uri for the address.",
            "example": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-lux-logo.svg"
          },
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          }
        },
        "required": ["address"]
      },
      "Erc20Token": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped LUX"
          },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WLUX"
          },
          "decimals": {
            "type": "number",
            "description": "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation.",
            "example": 18
          },
          "logoUri": {
            "type": "string",
            "description": "The logo uri for the address.",
            "example": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-lux-logo.svg"
          },
          "ercType": { "type": "string", "enum": ["ERC-20"] },
          "price": {
            "description": "The token price, if available.",
            "allOf": [{ "$ref": "#/components/schemas/Money" }]
          }
        },
        "required": ["address", "name", "symbol", "decimals", "ercType"]
      },
      "Erc20TransferDetails": {
        "type": "object",
        "properties": {
          "from": { "$ref": "#/components/schemas/RichAddress" },
          "to": { "$ref": "#/components/schemas/RichAddress" },
          "logIndex": { "type": "number" },
          "value": { "type": "string", "example": "10000000000000000000" },
          "erc20Token": { "$ref": "#/components/schemas/Erc20Token" }
        },
        "required": ["from", "to", "logIndex", "value", "erc20Token"]
      },
      "Erc721Token": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped LUX"
          },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WLUX"
          },
          "ercType": { "type": "string", "enum": ["ERC-721"] },
          "tokenId": { "type": "string" },
          "tokenUri": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/Erc721TokenMetadata" },
          "ownerAddress": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          }
        },
        "required": [
          "address",
          "name",
          "symbol",
          "ercType",
          "tokenId",
          "tokenUri",
          "metadata"
        ]
      },
      "Erc721TransferDetails": {
        "type": "object",
        "properties": {
          "from": { "$ref": "#/components/schemas/RichAddress" },
          "to": { "$ref": "#/components/schemas/RichAddress" },
          "logIndex": { "type": "number" },
          "erc721Token": { "$ref": "#/components/schemas/Erc721Token" }
        },
        "required": ["from", "to", "logIndex", "erc721Token"]
      },
      "Erc1155Token": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "ercType": { "type": "string", "enum": ["ERC-1155"] },
          "tokenId": { "type": "string" },
          "tokenUri": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/Erc1155TokenMetadata" }
        },
        "required": ["address", "ercType", "tokenId", "tokenUri", "metadata"]
      },
      "Erc1155TransferDetails": {
        "type": "object",
        "properties": {
          "from": { "$ref": "#/components/schemas/RichAddress" },
          "to": { "$ref": "#/components/schemas/RichAddress" },
          "logIndex": { "type": "number" },
          "value": { "type": "string", "example": "10000000000000000000" },
          "erc1155Token": { "$ref": "#/components/schemas/Erc1155Token" }
        },
        "required": ["from", "to", "logIndex", "value", "erc1155Token"]
      },
      "InternalTransactionOpCall": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "CALL",
          "CREATE",
          "CREATE2",
          "CALLCODE",
          "DELEGATECALL",
          "STATICCALL"
        ]
      },
      "InternalTransactionDetails": {
        "type": "object",
        "properties": {
          "from": { "$ref": "#/components/schemas/RichAddress" },
          "to": { "$ref": "#/components/schemas/RichAddress" },
          "internalTxType": {
            "$ref": "#/components/schemas/InternalTransactionOpCall"
          },
          "value": { "type": "string", "example": "10000000000000000000" },
          "isReverted": {
            "type": "boolean",
            "description": "True if the internal transaction was reverted."
          },
          "gasUsed": { "type": "string" },
          "gasLimit": { "type": "string" }
        },
        "required": [
          "from",
          "to",
          "internalTxType",
          "value",
          "isReverted",
          "gasUsed",
          "gasLimit"
        ]
      },
      "NetworkToken": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped LUX"
          },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WLUX"
          },
          "decimals": {
            "type": "number",
            "description": "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation.",
            "example": 18
          },
          "logoUri": {
            "type": "string",
            "description": "The logo uri for the address.",
            "example": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-lux-logo.svg"
          },
          "description": { "type": "string" }
        },
        "required": ["name", "symbol", "decimals"]
      },
      "NetworkTokenDetails": {
        "type": "object",
        "properties": {
          "networkToken": { "$ref": "#/components/schemas/NetworkToken" },
          "currentPrice": {
            "description": "The current token price, if available.",
            "allOf": [{ "$ref": "#/components/schemas/Money" }]
          },
          "historicalPrice": {
            "description": "The historical token price at the time the transaction occured, if available. Note, this is only provided if the transaction occured more than 24 hours ago.",
            "allOf": [{ "$ref": "#/components/schemas/Money" }]
          }
        },
        "required": ["networkToken"]
      },
      "TransactionMethodType": {
        "type": "string",
        "enum": ["NATIVE_TRANSFER", "CONTRACT_CALL", "CONTRACT_CREATION"]
      },
      "Method": {
        "type": "object",
        "properties": {
          "callType": {
            "description": "The contract call type. NATIVE_TRANSFER indicates a transfer of the native token without any smart-contract interaction. CONTRACT_CALL indicates a smart-contract interaction. CONTRACT_CREATION indicates a smart-contract creation.",
            "example": "CONTRACT_CALL",
            "$ref": "#/components/schemas/TransactionMethodType"
          },
          "methodHash": {
            "type": "string",
            "description": "The contract method hash identifier. The method hash is only set if the `callType` is `CONTRACT_CALL`.",
            "example": "0xa9059cbb"
          },
          "methodName": {
            "type": "string",
            "description": "The contract method name including parameter types. If the `callType` is `NATIVE_TRANSFER` this is set to 'Native Transfer'. If the `callType` is `CONTRACT_CREATION` this is set to 'Contract Created'.",
            "example": "transfer(address,uint256)"
          }
        },
        "required": ["callType", "methodHash"]
      },
      "FullNativeTransactionDetails": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The block number on the chain.",
            "example": "339"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockHash": {
            "type": "string",
            "description": "The block hash identifier.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
          },
          "blockIndex": {
            "type": "number",
            "description": "The index at which the transaction occured in the block (0-indexed).",
            "example": 0
          },
          "txHash": {
            "type": "string",
            "description": "The transaction hash identifier.",
            "example": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
          },
          "txStatus": {
            "type": "string",
            "description": "The transaction status, which is either 0 (failed) or 1 (successful).",
            "example": "1"
          },
          "txType": {
            "type": "number",
            "description": "The transaction type.",
            "example": 1
          },
          "gasLimit": {
            "type": "string",
            "description": "The gas limit set for the transaction.",
            "example": "51373"
          },
          "gasUsed": {
            "type": "string",
            "description": "The amount of gas used.",
            "example": "51373"
          },
          "gasPrice": {
            "type": "string",
            "description": "The gas price denominated by the number of decimals of the native token.",
            "example": "470000000000"
          },
          "nonce": {
            "type": "string",
            "description": "The nonce used by the sender of the transaction.",
            "example": "1"
          },
          "from": { "$ref": "#/components/schemas/RichAddress" },
          "to": { "$ref": "#/components/schemas/RichAddress" },
          "method": { "$ref": "#/components/schemas/Method" },
          "value": { "type": "string", "example": "10000000000000000000" },
          "input": {
            "type": "string",
            "description": "The data sent for the transaction."
          },
          "baseFeePerGas": { "type": "string" },
          "maxFeePerGas": { "type": "string" },
          "maxPriorityFeePerGas": { "type": "string" }
        },
        "required": [
          "blockNumber",
          "blockTimestamp",
          "blockHash",
          "blockIndex",
          "txHash",
          "txStatus",
          "txType",
          "gasLimit",
          "gasUsed",
          "gasPrice",
          "nonce",
          "from",
          "to",
          "value",
          "input",
          "baseFeePerGas"
        ]
      },
      "GetTransactionResponse": {
        "type": "object",
        "properties": {
          "erc20Transfers": {
            "description": "The list of ERC-20 transfers.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Erc20TransferDetails" }
          },
          "erc721Transfers": {
            "description": "The list of ERC-721 transfers.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Erc721TransferDetails" }
          },
          "erc1155Transfers": {
            "description": "The list of ERC-1155 transfers.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Erc1155TransferDetails" }
          },
          "internalTransactions": {
            "description": "The list of internal transactions. Note that this list only includes CALL and CALLCODE internal transactions that had a non-zero value and CREATE/CREATE2 calls. Use a client provider to recieve a full debug trace of the transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InternalTransactionDetails"
            }
          },
          "networkTokenDetails": {
            "$ref": "#/components/schemas/NetworkTokenDetails"
          },
          "nativeTransaction": {
            "$ref": "#/components/schemas/FullNativeTransactionDetails"
          }
        },
        "required": ["networkTokenDetails", "nativeTransaction"]
      },
      "ImageAsset": {
        "type": "object",
        "properties": {
          "assetId": { "type": "string" },
          "imageUri": { "type": "string", "description": "OUTPUT ONLY" }
        }
      },
      "ResourceLinkType": {
        "type": "string",
        "enum": [
          "Blog",
          "CoinGecko",
          "CoinMarketCap",
          "Discord",
          "Documentation",
          "Facebook",
          "Github",
          "Instagram",
          "LinkedIn",
          "Medium",
          "Reddit",
          "Support",
          "Telegram",
          "TikTok",
          "Twitter",
          "Website",
          "Whitepaper",
          "Youtube"
        ]
      },
      "ResourceLink": {
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/ResourceLinkType" },
          "url": { "type": "string" }
        },
        "required": ["type", "url"]
      },
      "ContractDeploymentDetails": {
        "type": "object",
        "properties": {
          "txHash": { "type": "string" },
          "deployerAddress": {
            "type": "string",
            "description": "The address that initiated the transaction which deployed this contract."
          },
          "deployerContractAddress": {
            "type": "string",
            "description": "The contract address which deployed this contract via smart contract. This field is only populated when the contract was deployed as part of smart contract execution."
          }
        },
        "required": ["txHash", "deployerAddress"]
      },
      "UnknownContract": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped LUX"
          },
          "description": { "type": "string" },
          "officialSite": { "type": "string" },
          "email": { "type": "string" },
          "logoAsset": { "$ref": "#/components/schemas/ImageAsset" },
          "bannerAsset": { "$ref": "#/components/schemas/ImageAsset" },
          "color": { "type": "string" },
          "resourceLinks": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ResourceLink" }
          },
          "tags": { "type": "array", "items": { "type": "string" } },
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "deploymentDetails": {
            "$ref": "#/components/schemas/ContractDeploymentDetails"
          },
          "ercType": { "type": "string", "enum": ["UNKNOWN"] }
        },
        "required": ["address", "deploymentDetails", "ercType"]
      },
      "PricingProviders": {
        "type": "object",
        "properties": { "coingeckoCoinId": { "type": "string" } }
      },
      "Erc20Contract": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped LUX"
          },
          "description": { "type": "string" },
          "officialSite": { "type": "string" },
          "email": { "type": "string" },
          "logoAsset": { "$ref": "#/components/schemas/ImageAsset" },
          "bannerAsset": { "$ref": "#/components/schemas/ImageAsset" },
          "color": { "type": "string" },
          "resourceLinks": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ResourceLink" }
          },
          "tags": { "type": "array", "items": { "type": "string" } },
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "deploymentDetails": {
            "$ref": "#/components/schemas/ContractDeploymentDetails"
          },
          "ercType": { "type": "string", "enum": ["ERC-20"] },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WLUX"
          },
          "decimals": {
            "type": "number",
            "description": "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation.",
            "example": 18
          },
          "pricingProviders": {
            "$ref": "#/components/schemas/PricingProviders"
          }
        },
        "required": [
          "address",
          "deploymentDetails",
          "ercType",
          "decimals",
          "pricingProviders"
        ]
      },
      "Erc721Contract": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped LUX"
          },
          "description": { "type": "string" },
          "officialSite": { "type": "string" },
          "email": { "type": "string" },
          "logoAsset": { "$ref": "#/components/schemas/ImageAsset" },
          "bannerAsset": { "$ref": "#/components/schemas/ImageAsset" },
          "color": { "type": "string" },
          "resourceLinks": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ResourceLink" }
          },
          "tags": { "type": "array", "items": { "type": "string" } },
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "deploymentDetails": {
            "$ref": "#/components/schemas/ContractDeploymentDetails"
          },
          "ercType": { "type": "string", "enum": ["ERC-721"] },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WLUX"
          }
        },
        "required": ["address", "deploymentDetails", "ercType"]
      },
      "Erc1155Contract": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped LUX"
          },
          "description": { "type": "string" },
          "officialSite": { "type": "string" },
          "email": { "type": "string" },
          "logoAsset": { "$ref": "#/components/schemas/ImageAsset" },
          "bannerAsset": { "$ref": "#/components/schemas/ImageAsset" },
          "color": { "type": "string" },
          "resourceLinks": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ResourceLink" }
          },
          "tags": { "type": "array", "items": { "type": "string" } },
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "deploymentDetails": {
            "$ref": "#/components/schemas/ContractDeploymentDetails"
          },
          "ercType": { "type": "string", "enum": ["ERC-1155"] },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WLUX"
          },
          "pricingProviders": {
            "$ref": "#/components/schemas/PricingProviders"
          }
        },
        "required": ["address", "deploymentDetails", "ercType"]
      },
      "ListContractsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "contracts": {
            "type": "array",
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/UnknownContract" },
                { "$ref": "#/components/schemas/Erc20Contract" },
                { "$ref": "#/components/schemas/Erc721Contract" },
                { "$ref": "#/components/schemas/Erc1155Contract" }
              ],
              "discriminator": {
                "propertyName": "ercType",
                "mapping": {
                  "UNKNOWN": "#/components/schemas/UnknownContract",
                  "ERC-20": "#/components/schemas/Erc20Contract",
                  "ERC-721": "#/components/schemas/Erc721Contract",
                  "ERC-1155": "#/components/schemas/Erc1155Contract"
                }
              }
            }
          }
        },
        "required": ["contracts"]
      },
      "ContractSubmissionErc1155": {
        "type": "object",
        "properties": {
          "description": { "type": "string" },
          "officialSite": { "type": "string" },
          "email": { "type": "string" },
          "logoAsset": { "$ref": "#/components/schemas/ImageAsset" },
          "bannerAsset": { "$ref": "#/components/schemas/ImageAsset" },
          "color": { "type": "string" },
          "resourceLinks": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ResourceLink" }
          },
          "tags": { "type": "array", "items": { "type": "string" } },
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped LUX"
          },
          "ercType": { "type": "string", "enum": ["ERC-1155"] },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WLUX"
          },
          "pricingProviders": {
            "$ref": "#/components/schemas/PricingProviders"
          }
        },
        "required": ["name", "ercType", "symbol"]
      },
      "ContractSubmissionErc20": {
        "type": "object",
        "properties": {
          "description": { "type": "string" },
          "officialSite": { "type": "string" },
          "email": { "type": "string" },
          "logoAsset": { "$ref": "#/components/schemas/ImageAsset" },
          "bannerAsset": { "$ref": "#/components/schemas/ImageAsset" },
          "color": { "type": "string" },
          "resourceLinks": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ResourceLink" }
          },
          "tags": { "type": "array", "items": { "type": "string" } },
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped LUX"
          },
          "ercType": { "type": "string", "enum": ["ERC-20"] },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WLUX"
          },
          "pricingProviders": {
            "$ref": "#/components/schemas/PricingProviders"
          }
        },
        "required": ["name", "ercType", "symbol"]
      },
      "ContractSubmissionErc721": {
        "type": "object",
        "properties": {
          "description": { "type": "string" },
          "officialSite": { "type": "string" },
          "email": { "type": "string" },
          "logoAsset": { "$ref": "#/components/schemas/ImageAsset" },
          "bannerAsset": { "$ref": "#/components/schemas/ImageAsset" },
          "color": { "type": "string" },
          "resourceLinks": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ResourceLink" }
          },
          "tags": { "type": "array", "items": { "type": "string" } },
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped LUX"
          },
          "ercType": { "type": "string", "enum": ["ERC-721"] },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WLUX"
          }
        },
        "required": ["name", "ercType", "symbol"]
      },
      "ContractSubmissionUnknown": {
        "type": "object",
        "properties": {
          "description": { "type": "string" },
          "officialSite": { "type": "string" },
          "email": { "type": "string" },
          "logoAsset": { "$ref": "#/components/schemas/ImageAsset" },
          "bannerAsset": { "$ref": "#/components/schemas/ImageAsset" },
          "color": { "type": "string" },
          "resourceLinks": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ResourceLink" }
          },
          "tags": { "type": "array", "items": { "type": "string" } },
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped LUX"
          },
          "ercType": { "type": "string", "enum": ["UNKNOWN"] }
        },
        "required": ["name", "ercType"]
      },
      "ContractSubmissionBody": {
        "type": "object",
        "properties": {
          "contract": {
            "oneOf": [
              { "$ref": "#/components/schemas/ContractSubmissionErc1155" },
              { "$ref": "#/components/schemas/ContractSubmissionErc20" },
              { "$ref": "#/components/schemas/ContractSubmissionErc721" },
              { "$ref": "#/components/schemas/ContractSubmissionUnknown" }
            ],
            "discriminator": {
              "propertyName": "ercType",
              "mapping": {
                "UNKNOWN": "#/components/schemas/ContractSubmissionUnknown",
                "ERC-1155": "#/components/schemas/ContractSubmissionErc1155",
                "ERC-20": "#/components/schemas/ContractSubmissionErc20",
                "ERC-721": "#/components/schemas/ContractSubmissionErc721"
              }
            }
          }
        },
        "required": ["contract"]
      },
      "UpdateContractResponse": {
        "type": "object",
        "properties": {
          "contract": {
            "oneOf": [
              { "$ref": "#/components/schemas/UnknownContract" },
              { "$ref": "#/components/schemas/Erc20Contract" },
              { "$ref": "#/components/schemas/Erc721Contract" },
              { "$ref": "#/components/schemas/Erc1155Contract" }
            ],
            "discriminator": {
              "propertyName": "ercType",
              "mapping": {
                "UNKNOWN": "#/components/schemas/UnknownContract",
                "ERC-20": "#/components/schemas/Erc20Contract",
                "ERC-721": "#/components/schemas/Erc721Contract",
                "ERC-1155": "#/components/schemas/Erc1155Contract"
              }
            }
          }
        },
        "required": ["contract"]
      },
      "NetworkType": { "type": "string", "enum": ["mainnet", "testnet"] },
      "ChainStatus": { "type": "string", "enum": ["OK", "UNAVAILABLE"] },
      "VmName": { "type": "string", "enum": ["EVM", "BITCOIN", "ETHEREUM"] },
      "UtilityAddresses": {
        "type": "object",
        "properties": { "multicall": { "type": "string" } }
      },
      "ChainInfo": {
        "type": "object",
        "properties": {
          "chainId": { "type": "string" },
          "status": {
            "description": "Status of chain nodes. Chain nodes can become temporarily `UNAVAILABLE` for several reasons, such as validator stake falling below threshold. If chain nodes are `UNAVAILABLE`, requests that rely on data from the chain nodes may return 503 errors.",
            "$ref": "#/components/schemas/ChainStatus"
          },
          "chainName": { "type": "string" },
          "description": { "type": "string" },
          "platformChainId": { "type": "string" },
          "subnetId": { "type": "string" },
          "vmId": { "type": "string" },
          "vmName": { "$ref": "#/components/schemas/VmName" },
          "explorerUrl": { "type": "string" },
          "rpcUrl": { "type": "string" },
          "wsUrl": { "type": "string" },
          "isTestnet": { "type": "boolean" },
          "utilityAddresses": {
            "$ref": "#/components/schemas/UtilityAddresses"
          },
          "networkToken": { "$ref": "#/components/schemas/NetworkToken" },
          "chainLogoUri": { "type": "string" }
        },
        "required": [
          "chainId",
          "status",
          "chainName",
          "description",
          "vmName",
          "rpcUrl",
          "isTestnet",
          "networkToken"
        ]
      },
      "ListChainsResponse": {
        "type": "object",
        "properties": {
          "chains": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ChainInfo" }
          }
        },
        "required": ["chains"]
      },
      "GetChainResponse": {
        "type": "object",
        "properties": {
          "chainId": { "type": "string" },
          "status": {
            "description": "Status of chain nodes. Chain nodes can become temporarily `UNAVAILABLE` for several reasons, such as validator stake falling below threshold. If chain nodes are `UNAVAILABLE`, requests that rely on data from the chain nodes may return 503 errors.",
            "$ref": "#/components/schemas/ChainStatus"
          },
          "chainName": { "type": "string" },
          "description": { "type": "string" },
          "platformChainId": { "type": "string" },
          "subnetId": { "type": "string" },
          "vmId": { "type": "string" },
          "vmName": { "$ref": "#/components/schemas/VmName" },
          "explorerUrl": { "type": "string" },
          "rpcUrl": { "type": "string" },
          "wsUrl": { "type": "string" },
          "isTestnet": { "type": "boolean" },
          "utilityAddresses": {
            "$ref": "#/components/schemas/UtilityAddresses"
          },
          "networkToken": { "$ref": "#/components/schemas/NetworkToken" },
          "chainLogoUri": { "type": "string" }
        },
        "required": [
          "chainId",
          "status",
          "chainName",
          "description",
          "vmName",
          "rpcUrl",
          "isTestnet",
          "networkToken"
        ]
      },
      "EvmNetworkOptions": {
        "type": "object",
        "properties": {
          "addresses": { "type": "array", "items": { "type": "string" } },
          "includeChains": {
            "example": ["43114"],
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["addresses", "includeChains"]
      },
      "CreateEvmTransactionExportRequest": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["TRANSACTION_EXPORT_EVM"] },
          "firstDate": { "type": "string", "example": "2023-05-01" },
          "lastDate": { "type": "string", "example": "2023-05-02" },
          "startDate": {
            "type": "string",
            "example": "2023-05-01",
            "deprecated": true
          },
          "endDate": {
            "type": "string",
            "example": "2023-05-02",
            "deprecated": true
          },
          "options": { "$ref": "#/components/schemas/EvmNetworkOptions" }
        },
        "required": [
          "type",
          "firstDate",
          "lastDate",
          "startDate",
          "endDate",
          "options"
        ]
      },
      "PrimaryNetworkOptions": {
        "type": "object",
        "properties": {
          "addresses": { "type": "array", "items": { "type": "string" } },
          "cChainEvmAddresses": {
            "type": "array",
            "items": { "type": "string" }
          },
          "includeChains": {
            "type": "array",
            "example": ["p-chain"],
            "items": {
              "type": "string",
              "enum": [
                "11111111111111111111111111111111LpoYY",
                "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                "2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm",
                "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5",
                "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp",
                "p-chain",
                "x-chain",
                "c-chain"
              ]
            }
          }
        },
        "required": ["addresses", "includeChains"]
      },
      "CreatePrimaryNetworkTransactionExportRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["TRANSACTION_EXPORT_PRIMARY_NETWORK"]
          },
          "firstDate": { "type": "string", "example": "2023-05-01" },
          "lastDate": { "type": "string", "example": "2023-05-02" },
          "startDate": {
            "type": "string",
            "example": "2023-05-01",
            "deprecated": true
          },
          "endDate": {
            "type": "string",
            "example": "2023-05-02",
            "deprecated": true
          },
          "options": { "$ref": "#/components/schemas/PrimaryNetworkOptions" }
        },
        "required": [
          "type",
          "firstDate",
          "lastDate",
          "startDate",
          "endDate",
          "options"
        ]
      },
      "OperationStatusCode": {
        "type": "string",
        "enum": ["ErrInvalidRequest", "ErrInternal", "WarnTruncatedExport"]
      },
      "TransactionExportMetadata": {
        "type": "object",
        "properties": {
          "code": { "$ref": "#/components/schemas/OperationStatusCode" },
          "downloadUrl": {
            "type": "string",
            "description": "File download URL. Provided only for COMPLETED and COMPLETED_WITH_WARNING operations."
          },
          "nextDate": {
            "type": "string",
            "description": "The next date (YYYY-MM-DD) to use as the firstDate in follow up requests if a request results in a transaction history exceeding the max size and has been reported as `COMPLETED_WITH_WARNING` with the warning 'WarnTruncatedExport'."
          }
        }
      },
      "OperationType": {
        "type": "string",
        "enum": ["TRANSACTION_EXPORT_EVM", "TRANSACTION_EXPORT_PRIMARY_NETWORK"]
      },
      "OperationStatus": {
        "type": "string",
        "enum": ["RUNNING", "COMPLETED", "COMPLETED_WITH_WARNING", "FAILED"]
      },
      "OperationStatusResponse": {
        "type": "object",
        "properties": {
          "operationId": { "type": "string" },
          "operationType": { "$ref": "#/components/schemas/OperationType" },
          "operationStatus": { "$ref": "#/components/schemas/OperationStatus" },
          "message": { "type": "string" },
          "metadata": {
            "oneOf": [
              { "$ref": "#/components/schemas/TransactionExportMetadata" }
            ],
            "allOf": [
              { "$ref": "#/components/schemas/TransactionExportMetadata" }
            ]
          },
          "createdAtTimestamp": { "type": "number" },
          "updatedAtTimestamp": { "type": "number" }
        },
        "required": [
          "operationId",
          "operationType",
          "operationStatus",
          "metadata",
          "createdAtTimestamp",
          "updatedAtTimestamp"
        ]
      },
      "PChainTransactionType": {
        "type": "string",
        "enum": [
          "AddValidatorTx",
          "AddDelegatorTx",
          "AddPermissionlessValidatorTx",
          "AddSubnetValidatorTx",
          "RemoveSubnetValidatorTx",
          "RewardValidatorTx",
          "CreateChainTx",
          "CreateSubnetTx",
          "ImportTx",
          "ExportTx",
          "AdvanceTimeTx",
          "UNKNOWN"
        ]
      },
      "UtxoType": { "type": "string", "enum": ["STAKE", "TRANSFER"] },
      "RewardType": { "type": "string", "enum": ["VALIDATOR", "DELEGATOR"] },
      "PChainUtxo": {
        "type": "object",
        "properties": {
          "addresses": {
            "description": "An array of P-Chain wallet addresses.",
            "example": ["lux1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"],
            "type": "array",
            "items": { "type": "string" }
          },
          "utxoId": { "type": "string" },
          "txHash": { "type": "string" },
          "outputIndex": { "type": "number" },
          "blockNumber": { "type": "string" },
          "blockTimestamp": { "type": "number" },
          "consumingTxHash": { "type": "string" },
          "consumingBlockTimestamp": { "type": "number" },
          "consumingBlockNumber": { "type": "string" },
          "assetId": { "type": "string" },
          "utxoType": { "$ref": "#/components/schemas/UtxoType" },
          "amount": { "type": "string" },
          "stakeableLocktime": { "type": "number" },
          "platformLocktime": { "type": "number" },
          "threshold": { "type": "number" },
          "createdOnChainId": { "type": "string" },
          "consumedOnChainId": { "type": "string" },
          "staked": { "type": "boolean" },
          "utxoStartTimestamp": { "type": "number" },
          "utxoEndTimestamp": { "type": "number" },
          "rewardType": { "$ref": "#/components/schemas/RewardType" }
        },
        "required": [
          "addresses",
          "utxoId",
          "txHash",
          "outputIndex",
          "blockNumber",
          "blockTimestamp",
          "assetId",
          "utxoType",
          "amount",
          "createdOnChainId",
          "consumedOnChainId"
        ]
      },
      "PChainAsset": {
        "type": "object",
        "properties": {
          "assetId": { "type": "string" },
          "amount": { "type": "string" }
        },
        "required": ["assetId", "amount"]
      },
      "PChainTransaction": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "description": "A P-Chain transaction hash.",
            "example": "3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP"
          },
          "txType": {
            "example": "AddDelegatorTx",
            "$ref": "#/components/schemas/PChainTransactionType"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockNumber": { "type": "string" },
          "blockHash": { "type": "string" },
          "consumedUtxos": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PChainUtxo" }
          },
          "emittedUtxos": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PChainUtxo" }
          },
          "sourceChain": {
            "type": "string",
            "description": "Source chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "destinationChain": {
            "type": "string",
            "description": "Destination chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "value": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": { "$ref": "#/components/schemas/PChainAsset" }
          },
          "amountBurned": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": { "$ref": "#/components/schemas/PChainAsset" }
          },
          "amountStaked": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID. Present for AddValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": { "$ref": "#/components/schemas/PChainAsset" }
          },
          "startTimestamp": {
            "type": "number",
            "description": "Present for AddValidatorTx, AddSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
          },
          "endTimestamp": {
            "type": "number",
            "description": "Present for AddValidatorTx, AddSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
          },
          "delegationFeePercent": {
            "type": "string",
            "description": "Present for AddValidatorTx, AddPermissionlessValidatorTx"
          },
          "nodeId": {
            "type": "string",
            "description": "Present for AddValidatorTx, AddSubnetValidatorTx, RemoveSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
          },
          "subnetId": {
            "type": "string",
            "description": "Present for AddValidatorTx, AddSubnetValidatorTx, RemoveSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx, CreateChainTx, CreateSubnetTx"
          },
          "estimatedReward": {
            "type": "string",
            "description": "Present for AddValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
          },
          "rewardTxHash": { "type": "string" },
          "memo": { "type": "string" },
          "stakingTxHash": {
            "type": "string",
            "description": "Present for RewardValidatorTx"
          }
        },
        "required": [
          "txHash",
          "txType",
          "blockTimestamp",
          "blockNumber",
          "blockHash",
          "consumedUtxos",
          "emittedUtxos",
          "value",
          "amountBurned",
          "amountStaked"
        ]
      },
      "Asset": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Unique ID for an asset.",
            "example": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
          },
          "name": {
            "type": "string",
            "description": "Name of this asset.",
            "example": "Lux"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol for this asset (max 4 characters).",
            "example": "LUX"
          },
          "denomination": {
            "type": "number",
            "description": "Denomination of this asset to represent fungibility.",
            "example": 9
          },
          "type": {
            "type": "string",
            "description": "Type of asset like SECP256K1 or NFT.",
            "example": "secp256k1"
          },
          "amount": {
            "type": "string",
            "description": "Amount of the asset.",
            "example": "5001000"
          }
        },
        "required": [
          "assetId",
          "name",
          "symbol",
          "denomination",
          "type",
          "amount"
        ]
      },
      "UtxoCredential": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "description": "Signature provided to consume the output",
            "example": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA"
          },
          "publicKey": {
            "type": "string",
            "description": "Public key associated with the signature",
            "example": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"
          }
        }
      },
      "Utxo": {
        "type": "object",
        "properties": {
          "utxoId": {
            "type": "string",
            "description": "UTXO ID for this output.",
            "example": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC"
          },
          "asset": { "$ref": "#/components/schemas/Asset" },
          "utxoType": {
            "type": "string",
            "description": "Type of output.",
            "example": "mint"
          },
          "createdOnChainId": {
            "type": "string",
            "description": "Blockchain ID on which this output is created on.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "consumedOnChainId": {
            "type": "string",
            "description": "Blockchain ID on which this output is consumed on.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "creationTxHash": {
            "type": "string",
            "description": "Transaction ID that created this output.",
            "example": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z"
          },
          "consumingTxHash": {
            "type": "string",
            "description": "Transaction ID that consumed this output.",
            "example": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
          },
          "consumingTxTimestamp": {
            "type": "number",
            "description": "Timestamp in seconds this output is consumed.",
            "example": 1599696000
          },
          "outputIndex": {
            "type": "string",
            "description": "Postion of this output in a list of lexiographically sorted outputs of a transaction.",
            "example": 38
          },
          "timestamp": {
            "type": "number",
            "description": "Timestamp in seconds this outptut is created on.",
            "example": 1599696000
          },
          "locktime": {
            "type": "number",
            "description": "Locktime in seconds after which this output can be consumed.",
            "example": 0
          },
          "threshold": {
            "type": "number",
            "description": "Minimum number of signatures required to consume this output.",
            "example": 1
          },
          "addresses": {
            "description": "Addresses that are eligible to sign the consumption of this output.",
            "example": ["lux1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"],
            "type": "array",
            "items": { "type": "string" }
          },
          "payload": {
            "type": "string",
            "description": "Hex encoded data for NFT assets"
          },
          "groupId": {
            "type": "number",
            "description": "Index representing the minting set for the NFT mint output"
          },
          "credentials": {
            "description": "Credentials that signed the transaction to consume this utxo",
            "type": "array",
            "items": { "$ref": "#/components/schemas/UtxoCredential" }
          }
        },
        "required": [
          "utxoId",
          "asset",
          "utxoType",
          "createdOnChainId",
          "consumedOnChainId",
          "creationTxHash",
          "outputIndex",
          "timestamp",
          "locktime",
          "threshold",
          "addresses"
        ]
      },
      "XChainAssetDetails": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Unique ID for an asset.",
            "example": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
          },
          "name": {
            "type": "string",
            "description": "Name of this asset.",
            "example": "Lux"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol for this asset (max 4 characters).",
            "example": "LUX"
          },
          "denomination": {
            "type": "number",
            "description": "Denomination of this asset to represent fungibility.",
            "example": 9
          },
          "type": {
            "type": "string",
            "description": "Type of asset like SECP256K1 or NFT.",
            "example": "secp256k1"
          },
          "createdAtTimestamp": {
            "type": "number",
            "description": "Timestamp in seconds this asset was created on.",
            "example": 1675444720
          },
          "cap": {
            "type": "string",
            "description": "Cap represents if an asset can be or is fixed cap.",
            "example": "fixed"
          }
        },
        "required": [
          "assetId",
          "name",
          "symbol",
          "denomination",
          "type",
          "createdAtTimestamp",
          "cap"
        ]
      },
      "TransactionVertexDetail": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "Vertex ID of the vertex this transaction belongs to.",
            "example": "82qPRREHmh8Cfta4PGD6GymY9ZLyvgYugqW6hj9FykpMVRz1S"
          },
          "height": {
            "type": "number",
            "description": "Vertex height of the vertex this transaction belongs to.",
            "example": 1961
          },
          "timestamp": {
            "type": "number",
            "description": "Timestamp in seconds this vertex was accepted.",
            "example": 1600762738
          }
        },
        "required": ["hash", "height", "timestamp"]
      },
      "XChainNonLinearTransaction": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "description": "Unique ID for this transaction.",
            "example": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
          },
          "chainFormat": {
            "type": "string",
            "description": "Represents chain format this transaction is included in.",
            "enum": ["non-linear", "linear"],
            "example": "non-linear"
          },
          "timestamp": {
            "type": "number",
            "description": "Latest timestamp in seconds this transaction was accepted out of the same transaction accepted in other vertices.",
            "example": 1600762738
          },
          "txType": {
            "type": "string",
            "description": "Type of transaction.",
            "example": "BaseTx"
          },
          "memo": {
            "type": "string",
            "description": "Hex encoded memo bytes for this transaction.",
            "example": "0x546865204176616c616e6368652050726f6a656374"
          },
          "consumedUtxos": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Utxo" }
          },
          "emittedUtxos": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Utxo" }
          },
          "amountUnlocked": {
            "description": "Assets unlocked by inputs of this transaction.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Asset" }
          },
          "amountCreated": {
            "description": "Assets created by outputs of this transaction.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Asset" }
          },
          "sourceChain": {
            "type": "string",
            "description": "Source chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "destinationChain": {
            "type": "string",
            "description": "Destination chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "assetCreated": {
            "description": "Asset details of the asset created in CreateAssetTx",
            "allOf": [{ "$ref": "#/components/schemas/XChainAssetDetails" }]
          },
          "vertices": {
            "description": "A transaction on X-Chain can be accepted over multiple vertices.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/TransactionVertexDetail" }
          }
        },
        "required": [
          "txHash",
          "chainFormat",
          "timestamp",
          "txType",
          "memo",
          "consumedUtxos",
          "emittedUtxos",
          "amountUnlocked",
          "amountCreated",
          "vertices"
        ]
      },
      "XChainLinearTransaction": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "description": "Unique ID for this transaction.",
            "example": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
          },
          "chainFormat": {
            "type": "string",
            "description": "Represents chain format this transaction is included in.",
            "enum": ["non-linear", "linear"],
            "example": "non-linear"
          },
          "timestamp": {
            "type": "number",
            "description": "Latest timestamp in seconds this transaction was accepted out of the same transaction accepted in other vertices.",
            "example": 1600762738
          },
          "txType": {
            "type": "string",
            "description": "Type of transaction.",
            "example": "BaseTx"
          },
          "memo": {
            "type": "string",
            "description": "Hex encoded memo bytes for this transaction.",
            "example": "0x546865204176616c616e6368652050726f6a656374"
          },
          "consumedUtxos": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Utxo" }
          },
          "emittedUtxos": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Utxo" }
          },
          "amountUnlocked": {
            "description": "Assets unlocked by inputs of this transaction.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Asset" }
          },
          "amountCreated": {
            "description": "Assets created by outputs of this transaction.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Asset" }
          },
          "sourceChain": {
            "type": "string",
            "description": "Source chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "destinationChain": {
            "type": "string",
            "description": "Destination chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "assetCreated": {
            "description": "Asset details of the asset created in CreateAssetTx",
            "allOf": [{ "$ref": "#/components/schemas/XChainAssetDetails" }]
          },
          "blockHeight": {
            "type": "number",
            "description": "Height of the block this transaction belongs to.",
            "example": 1005
          },
          "blockHash": {
            "type": "string",
            "description": "Hash of the block this transaction belongs to.",
            "example": "82qPRREHmh8Cfta4PGD6GymY9ZLyvgYugqW6hj9FykpMVRz1S"
          }
        },
        "required": [
          "txHash",
          "chainFormat",
          "timestamp",
          "txType",
          "memo",
          "consumedUtxos",
          "emittedUtxos",
          "amountUnlocked",
          "amountCreated",
          "blockHeight",
          "blockHash"
        ]
      },
      "EVMInput": {
        "type": "object",
        "properties": {
          "fromAddress": {
            "type": "string",
            "description": "EVM address from which the asset is exported in ExportTx.",
            "example": "0xD0f2898e49d941D6d479B381d3C8F0bd8d983b4c"
          },
          "asset": {
            "description": "Asset details for the asset being transferred.",
            "allOf": [{ "$ref": "#/components/schemas/Asset" }]
          },
          "credentials": {
            "description": "Credentials that signed this transaction.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/UtxoCredential" }
          }
        },
        "required": ["fromAddress", "asset", "credentials"]
      },
      "CChainExportTransaction": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "description": "Unique ID for this transaction.",
            "example": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
          },
          "blockHeight": {
            "type": "number",
            "description": "Height of the block this transaction belongs to.",
            "example": 1005
          },
          "blockHash": {
            "type": "string",
            "description": "Hash of the block this transaction belongs to.",
            "example": "0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee"
          },
          "timestamp": {
            "type": "number",
            "description": "Latest timestamp in seconds this transaction was accepted.",
            "example": 1600762738
          },
          "memo": {
            "type": "string",
            "description": "Hex encoded memo bytes for this transaction.",
            "example": "0x546865204176616c616e6368652050726f6a656374"
          },
          "amountUnlocked": {
            "description": "Assets unlocked by inputs of this transaction.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Asset" }
          },
          "amountCreated": {
            "description": "Assets created by outputs of this transaction.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Asset" }
          },
          "sourceChain": {
            "type": "string",
            "description": "Source chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "destinationChain": {
            "type": "string",
            "description": "Destination chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "txType": {
            "type": "string",
            "description": "Type of transaction.",
            "enum": ["ExportTx"],
            "example": "ExportTx"
          },
          "evmInputs": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EVMInput" }
          },
          "emittedUtxos": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Utxo" }
          }
        },
        "required": [
          "txHash",
          "blockHeight",
          "blockHash",
          "timestamp",
          "memo",
          "amountUnlocked",
          "amountCreated",
          "sourceChain",
          "destinationChain",
          "txType",
          "evmInputs",
          "emittedUtxos"
        ]
      },
      "EVMOutput": {
        "type": "object",
        "properties": {
          "toAddress": {
            "type": "string",
            "description": "EVM address to which the asset is imported in ImportTx",
            "example": "0xD0f2898e49d941D6d479B381d3C8F0bd8d983b4c"
          },
          "asset": {
            "description": "Asset details for the asset being transferred.",
            "allOf": [{ "$ref": "#/components/schemas/Asset" }]
          }
        },
        "required": ["toAddress", "asset"]
      },
      "CChainImportTransaction": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "description": "Unique ID for this transaction.",
            "example": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
          },
          "blockHeight": {
            "type": "number",
            "description": "Height of the block this transaction belongs to.",
            "example": 1005
          },
          "blockHash": {
            "type": "string",
            "description": "Hash of the block this transaction belongs to.",
            "example": "0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee"
          },
          "timestamp": {
            "type": "number",
            "description": "Latest timestamp in seconds this transaction was accepted.",
            "example": 1600762738
          },
          "memo": {
            "type": "string",
            "description": "Hex encoded memo bytes for this transaction.",
            "example": "0x546865204176616c616e6368652050726f6a656374"
          },
          "amountUnlocked": {
            "description": "Assets unlocked by inputs of this transaction.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Asset" }
          },
          "amountCreated": {
            "description": "Assets created by outputs of this transaction.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Asset" }
          },
          "sourceChain": {
            "type": "string",
            "description": "Source chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "destinationChain": {
            "type": "string",
            "description": "Destination chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "txType": {
            "type": "string",
            "description": "Type of transaction.",
            "enum": ["ImportTx"],
            "example": "ImportTx"
          },
          "evmOutputs": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EVMOutput" }
          },
          "consumedUtxos": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Utxo" }
          }
        },
        "required": [
          "txHash",
          "blockHeight",
          "blockHash",
          "timestamp",
          "memo",
          "amountUnlocked",
          "amountCreated",
          "sourceChain",
          "destinationChain",
          "txType",
          "evmOutputs",
          "consumedUtxos"
        ]
      },
      "BlockchainId": {
        "type": "string",
        "enum": [
          "11111111111111111111111111111111LpoYY",
          "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
          "2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm",
          "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5",
          "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp",
          "p-chain",
          "x-chain",
          "c-chain"
        ]
      },
      "Network": { "type": "string", "enum": ["mainnet", "fuji"] },
      "PrimaryNetworkChainName": {
        "type": "string",
        "enum": ["p-chain", "x-chain", "c-chain"]
      },
      "PrimaryNetwork": { "type": "string", "enum": ["mainnet", "fuji"] },
      "PrimaryNetworkChainInfo": {
        "type": "object",
        "properties": {
          "chainName": {
            "$ref": "#/components/schemas/PrimaryNetworkChainName"
          },
          "network": { "$ref": "#/components/schemas/PrimaryNetwork" }
        },
        "required": ["chainName", "network"]
      },
      "ListPChainTransactionsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PChainTransaction" }
          },
          "chainInfo": {
            "$ref": "#/components/schemas/PrimaryNetworkChainInfo"
          }
        },
        "required": ["transactions", "chainInfo"]
      },
      "ListXChainTransactionsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/XChainNonLinearTransaction" },
                { "$ref": "#/components/schemas/XChainLinearTransaction" }
              ]
            }
          },
          "chainInfo": {
            "$ref": "#/components/schemas/PrimaryNetworkChainInfo"
          }
        },
        "required": ["transactions", "chainInfo"]
      },
      "ListCChainAtomicTransactionsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/CChainExportTransaction" },
                { "$ref": "#/components/schemas/CChainImportTransaction" }
              ]
            }
          },
          "chainInfo": {
            "$ref": "#/components/schemas/PrimaryNetworkChainInfo"
          }
        },
        "required": ["transactions", "chainInfo"]
      },
      "PrimaryNetworkTxType": {
        "type": "array",
        "enum": [
          "AddValidatorTx",
          "AddDelegatorTx",
          "AddPermissionlessValidatorTx",
          "AddSubnetValidatorTx",
          "RemoveSubnetValidatorTx",
          "RewardValidatorTx",
          "CreateChainTx",
          "CreateSubnetTx",
          "ImportTx",
          "ExportTx",
          "AdvanceTimeTx",
          "UNKNOWN",
          "BaseTx",
          "CreateAssetTx",
          "OperationTx"
        ]
      },
      "SortOrder": { "type": "string", "enum": ["asc", "desc"] },
      "PChainId": {
        "type": "string",
        "enum": ["11111111111111111111111111111111LpoYY", "p-chain"]
      },
      "PendingReward": {
        "type": "object",
        "properties": {
          "addresses": {
            "description": "An array of P-Chain wallet addresses.",
            "example": ["lux1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"],
            "type": "array",
            "items": { "type": "string" }
          },
          "txHash": { "type": "string" },
          "amountStaked": { "type": "string" },
          "nodeId": { "type": "string" },
          "startTimestamp": { "type": "number" },
          "endTimestamp": { "type": "number" },
          "rewardType": { "$ref": "#/components/schemas/RewardType" },
          "progress": { "type": "number" },
          "estimatedReward": {
            "description": "An object containing P-chain Asset ID and the amount of that Asset ID.",
            "example": {
              "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
              "amount": "100000000"
            },
            "allOf": [{ "$ref": "#/components/schemas/PChainAsset" }]
          }
        },
        "required": [
          "addresses",
          "txHash",
          "amountStaked",
          "nodeId",
          "startTimestamp",
          "endTimestamp",
          "rewardType",
          "progress",
          "estimatedReward"
        ]
      },
      "ListPendingRewardsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "pendingRewards": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PendingReward" }
          }
        },
        "required": ["pendingRewards"]
      },
      "HistoricalReward": {
        "type": "object",
        "properties": {
          "addresses": {
            "description": "An array of P-Chain wallet addresses.",
            "example": ["lux1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"],
            "type": "array",
            "items": { "type": "string" }
          },
          "txHash": { "type": "string" },
          "amountStaked": { "type": "string" },
          "nodeId": { "type": "string" },
          "startTimestamp": { "type": "number" },
          "endTimestamp": { "type": "number" },
          "rewardType": { "$ref": "#/components/schemas/RewardType" },
          "utxoId": { "type": "string" },
          "outputIndex": { "type": "number" },
          "reward": {
            "description": "An object containing P-chain Asset ID and the amount of that Asset ID.",
            "example": {
              "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
              "amount": "100000000"
            },
            "allOf": [{ "$ref": "#/components/schemas/PChainAsset" }]
          },
          "rewardTxHash": { "type": "string" }
        },
        "required": [
          "addresses",
          "txHash",
          "amountStaked",
          "nodeId",
          "startTimestamp",
          "endTimestamp",
          "rewardType",
          "utxoId",
          "outputIndex",
          "reward",
          "rewardTxHash"
        ]
      },
      "ListHistoricalRewardsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "historicalRewards": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/HistoricalReward" }
          }
        },
        "required": ["historicalRewards"]
      },
      "ListPChainUtxosResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "utxos": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PChainUtxo" }
          },
          "chainInfo": {
            "$ref": "#/components/schemas/PrimaryNetworkChainInfo"
          }
        },
        "required": ["utxos", "chainInfo"]
      },
      "ListUtxosResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "utxos": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Utxo" }
          },
          "chainInfo": {
            "$ref": "#/components/schemas/PrimaryNetworkChainInfo"
          }
        },
        "required": ["utxos", "chainInfo"]
      },
      "PChainSharedAsset": {
        "type": "object",
        "properties": {
          "assetId": { "type": "string" },
          "amount": { "type": "string" },
          "sharedWithChainId": { "type": "string" },
          "status": { "type": "string" }
        },
        "required": ["assetId", "amount", "sharedWithChainId", "status"]
      },
      "PChainBalance": {
        "type": "object",
        "properties": {
          "unlockedUnstaked": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID. Denotes the amount of unstaked Lux that is consumable by any transaction.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": { "$ref": "#/components/schemas/PChainAsset" }
          },
          "unlockedStaked": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID. Denotes the amount of staked Lux that is consumable by any transaction when the staking period ends.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": { "$ref": "#/components/schemas/PChainAsset" }
          },
          "lockedPlatform": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID. Denotes the amount of unstaked Lux that is locked at the platform level and not consumable by any transaction at the current time.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": { "$ref": "#/components/schemas/PChainAsset" }
          },
          "lockedStakeable": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID. Denotes the amount of unstaked Lux that is locked at the platform level and only consumeable for staking transactions.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": { "$ref": "#/components/schemas/PChainAsset" }
          },
          "lockedStaked": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID. Denotes the amount of staked Lux that will be locked when the staking period ends.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": { "$ref": "#/components/schemas/PChainAsset" }
          },
          "pendingStaked": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID. Denotes the amount of staked Lux whose staking period has not yet started.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": { "$ref": "#/components/schemas/PChainAsset" }
          },
          "atomicMemoryUnlocked": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID. Denotes the amount of unlocked Lux in the atomic memory between P-Chain and other chain.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000",
                "sharedWithChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                "status": "pendingExport"
              }
            ],
            "type": "array",
            "items": { "$ref": "#/components/schemas/PChainSharedAsset" }
          },
          "atomicMemoryLocked": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID. Denotes the amount of locked Lux in the atomic memory between P-Chain and other chain.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000",
                "sharedWithChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                "status": "pendingExport"
              }
            ],
            "type": "array",
            "items": { "$ref": "#/components/schemas/PChainSharedAsset" }
          }
        },
        "required": [
          "unlockedUnstaked",
          "unlockedStaked",
          "lockedPlatform",
          "lockedStakeable",
          "lockedStaked",
          "pendingStaked",
          "atomicMemoryUnlocked",
          "atomicMemoryLocked"
        ]
      },
      "ListPChainBalancesResponse": {
        "type": "object",
        "properties": {
          "balances": { "$ref": "#/components/schemas/PChainBalance" },
          "chainInfo": {
            "$ref": "#/components/schemas/PrimaryNetworkChainInfo"
          }
        },
        "required": ["balances", "chainInfo"]
      },
      "XChainAssetBalance": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Unique ID for an asset.",
            "example": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
          },
          "name": {
            "type": "string",
            "description": "Name of this asset.",
            "example": "Lux"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol for this asset (max 4 characters).",
            "example": "LUX"
          },
          "denomination": {
            "type": "number",
            "description": "Denomination of this asset to represent fungibility.",
            "example": 9
          },
          "type": {
            "type": "string",
            "description": "Type of asset like SECP256K1 or NFT.",
            "example": "secp256k1"
          },
          "amount": {
            "type": "string",
            "description": "Amount of the asset.",
            "example": "5001000"
          },
          "utxoCount": { "type": "number" }
        },
        "required": [
          "assetId",
          "name",
          "symbol",
          "denomination",
          "type",
          "amount",
          "utxoCount"
        ]
      },
      "XChainSharedAssetBalance": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Unique ID for an asset.",
            "example": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
          },
          "name": {
            "type": "string",
            "description": "Name of this asset.",
            "example": "Lux"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol for this asset (max 4 characters).",
            "example": "LUX"
          },
          "denomination": {
            "type": "number",
            "description": "Denomination of this asset to represent fungibility.",
            "example": 9
          },
          "type": {
            "type": "string",
            "description": "Type of asset like SECP256K1 or NFT.",
            "example": "secp256k1"
          },
          "amount": {
            "type": "string",
            "description": "Amount of the asset.",
            "example": "5001000"
          },
          "utxoCount": { "type": "number" },
          "sharedWithChainId": { "type": "string" }
        },
        "required": [
          "assetId",
          "name",
          "symbol",
          "denomination",
          "type",
          "amount",
          "utxoCount",
          "sharedWithChainId"
        ]
      },
      "XChainBalances": {
        "type": "object",
        "properties": {
          "locked": {
            "description": "A list of objects containing X-chain Asset balance information.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/XChainAssetBalance" }
          },
          "unlocked": {
            "description": "A list of objects containing X-chain Asset balance information.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/XChainAssetBalance" }
          },
          "atomicMemoryUnlocked": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/XChainSharedAssetBalance" }
          },
          "atomicMemoryLocked": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/XChainSharedAssetBalance" }
          }
        },
        "required": [
          "locked",
          "unlocked",
          "atomicMemoryUnlocked",
          "atomicMemoryLocked"
        ]
      },
      "ListXChainBalancesResponse": {
        "type": "object",
        "properties": {
          "balances": { "$ref": "#/components/schemas/XChainBalances" },
          "chainInfo": {
            "$ref": "#/components/schemas/PrimaryNetworkChainInfo"
          }
        },
        "required": ["balances", "chainInfo"]
      },
      "CChainSharedAssetBalance": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Unique ID for an asset.",
            "example": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
          },
          "name": {
            "type": "string",
            "description": "Name of this asset.",
            "example": "Lux"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol for this asset (max 4 characters).",
            "example": "LUX"
          },
          "denomination": {
            "type": "number",
            "description": "Denomination of this asset to represent fungibility.",
            "example": 9
          },
          "type": {
            "type": "string",
            "description": "Type of asset like SECP256K1 or NFT.",
            "example": "secp256k1"
          },
          "amount": {
            "type": "string",
            "description": "Amount of the asset.",
            "example": "5001000"
          },
          "utxoCount": { "type": "number" },
          "sharedWithChainId": { "type": "string" }
        },
        "required": [
          "assetId",
          "name",
          "symbol",
          "denomination",
          "type",
          "amount",
          "utxoCount",
          "sharedWithChainId"
        ]
      },
      "CChainAtomicBalances": {
        "type": "object",
        "properties": {
          "atomicMemoryUnlocked": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CChainSharedAssetBalance" }
          },
          "atomicMemoryLocked": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CChainSharedAssetBalance" }
          }
        },
        "required": ["atomicMemoryUnlocked", "atomicMemoryLocked"]
      },
      "ListCChainAtomicBalancesResponse": {
        "type": "object",
        "properties": {
          "balances": { "$ref": "#/components/schemas/CChainAtomicBalances" },
          "chainInfo": {
            "$ref": "#/components/schemas/PrimaryNetworkChainInfo"
          }
        },
        "required": ["balances", "chainInfo"]
      },
      "ProposerDetails": {
        "type": "object",
        "properties": {
          "proposerId": { "type": "string" },
          "proposerParentId": { "type": "string" },
          "proposerNodeId": { "type": "string" },
          "proposerPChainHeight": { "type": "number" },
          "proposerTimestamp": { "type": "number" }
        }
      },
      "GetPrimaryNetworkBlockResponse": {
        "type": "object",
        "properties": {
          "blockNumber": { "type": "string" },
          "blockHash": { "type": "string" },
          "parentHash": { "type": "string" },
          "blockTimestamp": { "type": "number" },
          "blockType": { "type": "string" },
          "txCount": { "type": "number" },
          "transactions": { "type": "array", "items": { "type": "string" } },
          "blockSizeBytes": { "type": "number" },
          "proposerDetails": { "$ref": "#/components/schemas/ProposerDetails" }
        },
        "required": [
          "blockNumber",
          "blockHash",
          "parentHash",
          "blockTimestamp",
          "blockType",
          "txCount",
          "transactions",
          "blockSizeBytes"
        ]
      },
      "PrimaryNetworkBlock": {
        "type": "object",
        "properties": {
          "blockNumber": { "type": "string" },
          "blockHash": { "type": "string" },
          "parentHash": { "type": "string" },
          "blockTimestamp": { "type": "number" },
          "blockType": { "type": "string" },
          "txCount": { "type": "number" },
          "transactions": { "type": "array", "items": { "type": "string" } },
          "blockSizeBytes": { "type": "number" },
          "proposerDetails": { "$ref": "#/components/schemas/ProposerDetails" }
        },
        "required": [
          "blockNumber",
          "blockHash",
          "parentHash",
          "blockTimestamp",
          "blockType",
          "txCount",
          "transactions",
          "blockSizeBytes"
        ]
      },
      "ListPrimaryNetworkBlocksResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "blocks": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PrimaryNetworkBlock" }
          },
          "chainInfo": {
            "$ref": "#/components/schemas/PrimaryNetworkChainInfo"
          }
        },
        "required": ["blocks", "chainInfo"]
      },
      "XChainId": {
        "type": "string",
        "enum": [
          "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
          "2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm",
          "x-chain"
        ]
      },
      "XChainVertex": {
        "type": "object",
        "properties": {
          "vertexHash": { "type": "string" },
          "parentHashes": { "type": "array", "items": { "type": "string" } },
          "vertexHeight": { "type": "number" },
          "vertexIndex": { "type": "number" },
          "vertexTimestamp": { "type": "number" },
          "txCount": { "type": "number" },
          "transactions": { "type": "array", "items": { "type": "string" } },
          "vertexSizeBytes": { "type": "number" }
        },
        "required": [
          "vertexHash",
          "parentHashes",
          "vertexHeight",
          "vertexIndex",
          "vertexTimestamp",
          "txCount",
          "transactions",
          "vertexSizeBytes"
        ]
      },
      "ListXChainVerticesResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "vertices": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/XChainVertex" }
          },
          "chainInfo": {
            "$ref": "#/components/schemas/PrimaryNetworkChainInfo"
          }
        },
        "required": ["vertices", "chainInfo"]
      },
      "BlockchainIds": {
        "type": "string",
        "enum": [
          "11111111111111111111111111111111LpoYY",
          "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
          "2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm",
          "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5",
          "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp"
        ]
      },
      "ChainAddressChainIdMap": {
        "type": "object",
        "properties": {
          "address": { "type": "string" },
          "blockchainIds": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/BlockchainIds" }
          }
        },
        "required": ["address", "blockchainIds"]
      },
      "ChainAddressChainIdMapListResponse": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ChainAddressChainIdMap" }
          }
        },
        "required": ["addresses"]
      },
      "Erc20Transfer": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The block number on the chain.",
            "example": "339"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockHash": {
            "type": "string",
            "description": "The block hash identifier.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
          },
          "txHash": {
            "type": "string",
            "description": "The transaction hash identifier.",
            "example": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
          },
          "from": { "$ref": "#/components/schemas/RichAddress" },
          "to": { "$ref": "#/components/schemas/RichAddress" },
          "logIndex": { "type": "number" },
          "value": { "type": "string", "example": "10000000000000000000" },
          "erc20Token": { "$ref": "#/components/schemas/Erc20Token" }
        },
        "required": [
          "blockNumber",
          "blockTimestamp",
          "blockHash",
          "txHash",
          "from",
          "to",
          "logIndex",
          "value",
          "erc20Token"
        ]
      },
      "Erc721Transfer": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The block number on the chain.",
            "example": "339"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockHash": {
            "type": "string",
            "description": "The block hash identifier.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
          },
          "txHash": {
            "type": "string",
            "description": "The transaction hash identifier.",
            "example": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
          },
          "from": { "$ref": "#/components/schemas/RichAddress" },
          "to": { "$ref": "#/components/schemas/RichAddress" },
          "logIndex": { "type": "number" },
          "erc721Token": { "$ref": "#/components/schemas/Erc721Token" }
        },
        "required": [
          "blockNumber",
          "blockTimestamp",
          "blockHash",
          "txHash",
          "from",
          "to",
          "logIndex",
          "erc721Token"
        ]
      },
      "Erc1155Transfer": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The block number on the chain.",
            "example": "339"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockHash": {
            "type": "string",
            "description": "The block hash identifier.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
          },
          "txHash": {
            "type": "string",
            "description": "The transaction hash identifier.",
            "example": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
          },
          "from": { "$ref": "#/components/schemas/RichAddress" },
          "to": { "$ref": "#/components/schemas/RichAddress" },
          "logIndex": { "type": "number" },
          "value": { "type": "string", "example": "10000000000000000000" },
          "erc1155Token": { "$ref": "#/components/schemas/Erc1155Token" }
        },
        "required": [
          "blockNumber",
          "blockTimestamp",
          "blockHash",
          "txHash",
          "from",
          "to",
          "logIndex",
          "value",
          "erc1155Token"
        ]
      },
      "ListTransfersResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transfers": {
            "oneOf": [
              {
                "type": "array",
                "items": { "$ref": "#/components/schemas/Erc20Transfer" }
              },
              {
                "type": "array",
                "items": { "$ref": "#/components/schemas/Erc721Transfer" }
              },
              {
                "type": "array",
                "items": { "$ref": "#/components/schemas/Erc1155Transfer" }
              }
            ],
            "items": { "type": "string" }
          }
        },
        "required": ["transfers"]
      },
      "NativeTransaction": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The block number on the chain.",
            "example": "339"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockHash": {
            "type": "string",
            "description": "The block hash identifier.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
          },
          "blockIndex": {
            "type": "number",
            "description": "The index at which the transaction occured in the block (0-indexed).",
            "example": 0
          },
          "txHash": {
            "type": "string",
            "description": "The transaction hash identifier.",
            "example": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
          },
          "txStatus": {
            "type": "string",
            "description": "The transaction status, which is either 0 (failed) or 1 (successful).",
            "example": "1"
          },
          "txType": {
            "type": "number",
            "description": "The transaction type.",
            "example": 1
          },
          "gasLimit": {
            "type": "string",
            "description": "The gas limit set for the transaction.",
            "example": "51373"
          },
          "gasUsed": {
            "type": "string",
            "description": "The amount of gas used.",
            "example": "51373"
          },
          "gasPrice": {
            "type": "string",
            "description": "The gas price denominated by the number of decimals of the native token.",
            "example": "470000000000"
          },
          "nonce": {
            "type": "string",
            "description": "The nonce used by the sender of the transaction.",
            "example": "1"
          },
          "from": { "$ref": "#/components/schemas/RichAddress" },
          "to": { "$ref": "#/components/schemas/RichAddress" },
          "method": { "$ref": "#/components/schemas/Method" },
          "value": { "type": "string", "example": "10000000000000000000" }
        },
        "required": [
          "blockNumber",
          "blockTimestamp",
          "blockHash",
          "blockIndex",
          "txHash",
          "txStatus",
          "txType",
          "gasLimit",
          "gasUsed",
          "gasPrice",
          "nonce",
          "from",
          "to",
          "value"
        ]
      },
      "TransactionDetails": {
        "type": "object",
        "properties": {
          "nativeTransaction": {
            "description": "The native (top-level) transaction details.",
            "allOf": [{ "$ref": "#/components/schemas/NativeTransaction" }]
          },
          "erc20Transfers": {
            "description": "The list of ERC-20 transfers.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Erc20TransferDetails" }
          },
          "erc721Transfers": {
            "description": "The list of ERC-721 transfers.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Erc721TransferDetails" }
          },
          "erc1155Transfers": {
            "description": "The list of ERC-1155 transfers.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Erc1155TransferDetails" }
          },
          "internalTransactions": {
            "description": "The list of internal transactions. Note that this list only includes CALL and CALLCODE internal transactions that had a non-zero value and CREATE/CREATE2 calls. Use a client provider to recieve a full debug trace of the transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InternalTransactionDetails"
            }
          }
        },
        "required": ["nativeTransaction"]
      },
      "ListTransactionDetailsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TransactionDetails" }
          }
        },
        "required": ["transactions"]
      },
      "ListNativeTransactionsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/NativeTransaction" }
          }
        },
        "required": ["transactions"]
      },
      "ListErc20TransactionsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Erc20Transfer" }
          }
        },
        "required": ["transactions"]
      },
      "ListErc721TransactionsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Erc721Transfer" }
          }
        },
        "required": ["transactions"]
      },
      "ListErc1155TransactionsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Erc1155Transfer" }
          }
        },
        "required": ["transactions"]
      },
      "InternalTransaction": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The block number on the chain.",
            "example": "339"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockHash": {
            "type": "string",
            "description": "The block hash identifier.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
          },
          "txHash": {
            "type": "string",
            "description": "The transaction hash identifier.",
            "example": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
          },
          "from": { "$ref": "#/components/schemas/RichAddress" },
          "to": { "$ref": "#/components/schemas/RichAddress" },
          "internalTxType": {
            "$ref": "#/components/schemas/InternalTransactionOpCall"
          },
          "value": { "type": "string", "example": "10000000000000000000" },
          "isReverted": {
            "type": "boolean",
            "description": "True if the internal transaction was reverted."
          },
          "gasUsed": { "type": "string" },
          "gasLimit": { "type": "string" }
        },
        "required": [
          "blockNumber",
          "blockTimestamp",
          "blockHash",
          "txHash",
          "from",
          "to",
          "internalTxType",
          "value",
          "isReverted",
          "gasUsed",
          "gasLimit"
        ]
      },
      "ListInternalTransactionsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/InternalTransaction" }
          }
        },
        "required": ["transactions"]
      },
      "TransactionStatus": { "type": "string", "enum": ["failed", "success"] },
      "StakingDistribution": {
        "type": "object",
        "properties": {
          "version": { "type": "string" },
          "amountStaked": { "type": "string" },
          "validatorCount": { "type": "number" }
        },
        "required": ["version", "amountStaked", "validatorCount"]
      },
      "ValidatorsDetails": {
        "type": "object",
        "properties": {
          "validatorCount": { "type": "number" },
          "totalAmountStaked": { "type": "string" },
          "estimatedAnnualStakingReward": { "type": "string" },
          "stakingDistributionByVersion": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/StakingDistribution" }
          },
          "stakingRatio": { "type": "string" }
        },
        "required": [
          "validatorCount",
          "totalAmountStaked",
          "estimatedAnnualStakingReward",
          "stakingDistributionByVersion",
          "stakingRatio"
        ]
      },
      "DelegatorsDetails": {
        "type": "object",
        "properties": {
          "delegatorCount": { "type": "number" },
          "totalAmountStaked": { "type": "string" }
        },
        "required": ["delegatorCount", "totalAmountStaked"]
      },
      "GetNetworkDetailsResponse": {
        "type": "object",
        "properties": {
          "validatorDetails": {
            "$ref": "#/components/schemas/ValidatorsDetails"
          },
          "delegatorDetails": {
            "$ref": "#/components/schemas/DelegatorsDetails"
          }
        },
        "required": ["validatorDetails", "delegatorDetails"]
      },
      "Blockchain": {
        "type": "object",
        "properties": {
          "createBlockTimestamp": { "type": "number" },
          "createBlockNumber": { "type": "string" },
          "blockchainId": { "type": "string" },
          "vmId": { "type": "string" },
          "subnetId": { "type": "string" },
          "blockchainName": { "type": "string" }
        },
        "required": [
          "createBlockTimestamp",
          "createBlockNumber",
          "blockchainId",
          "vmId",
          "subnetId",
          "blockchainName"
        ]
      },
      "ListBlockchainsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "blockchains": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Blockchain" }
          }
        },
        "required": ["blockchains"]
      },
      "BlockchainInfo": {
        "type": "object",
        "properties": { "blockchainId": { "type": "string" } },
        "required": ["blockchainId"]
      },
      "Subnet": {
        "type": "object",
        "properties": {
          "createBlockTimestamp": { "type": "number" },
          "createBlockIndex": { "type": "string" },
          "subnetId": { "type": "string" },
          "ownerAddresses": { "type": "array", "items": { "type": "string" } },
          "threshold": { "type": "number" },
          "locktime": { "type": "number" },
          "blockchains": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/BlockchainInfo" }
          }
        },
        "required": [
          "createBlockTimestamp",
          "createBlockIndex",
          "subnetId",
          "ownerAddresses",
          "threshold",
          "locktime",
          "blockchains"
        ]
      },
      "ListSubnetsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "subnets": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Subnet" }
          }
        },
        "required": ["subnets"]
      },
      "ValidationStatusType": {
        "type": "string",
        "enum": ["completed", "active", "pending"]
      },
      "Rewards": {
        "type": "object",
        "properties": {
          "validationRewardAmount": { "type": "string" },
          "delegationRewardAmount": { "type": "string" }
        },
        "required": ["validationRewardAmount", "delegationRewardAmount"]
      },
      "CompletedValidatorDetails": {
        "type": "object",
        "properties": {
          "nodeId": { "type": "string" },
          "amountStaked": { "type": "string" },
          "delegationFee": { "type": "string" },
          "startTimestamp": { "type": "number" },
          "endTimestamp": { "type": "number" },
          "validationStatus": {
            "$ref": "#/components/schemas/ValidationStatusType"
          },
          "delegatorCount": { "type": "number" },
          "rewards": { "$ref": "#/components/schemas/Rewards" }
        },
        "required": [
          "nodeId",
          "amountStaked",
          "delegationFee",
          "startTimestamp",
          "endTimestamp",
          "validationStatus",
          "delegatorCount",
          "rewards"
        ]
      },
      "ActiveValidatorDetails": {
        "type": "object",
        "properties": {
          "nodeId": { "type": "string" },
          "amountStaked": { "type": "string" },
          "delegationFee": { "type": "string" },
          "startTimestamp": { "type": "number" },
          "endTimestamp": { "type": "number" },
          "validationStatus": {
            "$ref": "#/components/schemas/ValidationStatusType"
          },
          "stakePercentage": { "type": "number" },
          "delegatorCount": { "type": "number" },
          "amountDelegated": { "type": "string" },
          "uptimePerformance": { "type": "number" },
          "avalancheGoVersion": { "type": "string" },
          "delegationCapacity": { "type": "string" },
          "potentialRewards": { "$ref": "#/components/schemas/Rewards" }
        },
        "required": [
          "nodeId",
          "amountStaked",
          "delegationFee",
          "startTimestamp",
          "endTimestamp",
          "validationStatus",
          "stakePercentage",
          "delegatorCount",
          "amountDelegated",
          "uptimePerformance",
          "avalancheGoVersion",
          "delegationCapacity",
          "potentialRewards"
        ]
      },
      "PendingValidatorDetails": {
        "type": "object",
        "properties": {
          "nodeId": { "type": "string" },
          "amountStaked": { "type": "string" },
          "delegationFee": { "type": "string" },
          "startTimestamp": { "type": "number" },
          "endTimestamp": { "type": "number" },
          "validationStatus": {
            "$ref": "#/components/schemas/ValidationStatusType"
          }
        },
        "required": [
          "nodeId",
          "amountStaked",
          "delegationFee",
          "startTimestamp",
          "endTimestamp",
          "validationStatus"
        ]
      },
      "ListValidatorDetailsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "validators": {
            "type": "array",
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/CompletedValidatorDetails" },
                { "$ref": "#/components/schemas/ActiveValidatorDetails" },
                { "$ref": "#/components/schemas/PendingValidatorDetails" }
              ],
              "discriminator": {
                "propertyName": "validationStatus",
                "mapping": {
                  "active": "#/components/schemas/ActiveValidatorDetails",
                  "pending": "#/components/schemas/PendingValidatorDetails",
                  "completed": "#/components/schemas/CompletedValidatorDetails"
                }
              }
            },
            "description": "The list of Validator Details."
          }
        },
        "required": ["validators"]
      },
      "DelegationStatusType": {
        "type": "string",
        "enum": ["completed", "active", "pending"]
      },
      "CompletedDelegatorDetails": {
        "type": "object",
        "properties": {
          "txHash": { "type": "string" },
          "rewardAddresses": { "type": "array", "items": { "type": "string" } },
          "amountDelegated": { "type": "string" },
          "delegationFee": { "type": "string" },
          "startTimestamp": { "type": "number" },
          "endTimestamp": { "type": "number" },
          "delegationStatus": {
            "$ref": "#/components/schemas/DelegationStatusType"
          },
          "grossReward": { "type": "string" },
          "netReward": { "type": "string" }
        },
        "required": [
          "txHash",
          "rewardAddresses",
          "amountDelegated",
          "delegationFee",
          "startTimestamp",
          "endTimestamp",
          "delegationStatus",
          "grossReward",
          "netReward"
        ]
      },
      "ActiveDelegatorDetails": {
        "type": "object",
        "properties": {
          "txHash": { "type": "string" },
          "rewardAddresses": { "type": "array", "items": { "type": "string" } },
          "amountDelegated": { "type": "string" },
          "delegationFee": { "type": "string" },
          "startTimestamp": { "type": "number" },
          "endTimestamp": { "type": "number" },
          "delegationStatus": {
            "$ref": "#/components/schemas/DelegationStatusType"
          },
          "estimatedGrossReward": { "type": "string" },
          "estimatedNetReward": { "type": "string" }
        },
        "required": [
          "txHash",
          "rewardAddresses",
          "amountDelegated",
          "delegationFee",
          "startTimestamp",
          "endTimestamp",
          "delegationStatus",
          "estimatedGrossReward",
          "estimatedNetReward"
        ]
      },
      "PendingDelegatorDetails": {
        "type": "object",
        "properties": {
          "txHash": { "type": "string" },
          "rewardAddresses": { "type": "array", "items": { "type": "string" } },
          "amountDelegated": { "type": "string" },
          "delegationFee": { "type": "string" },
          "startTimestamp": { "type": "number" },
          "endTimestamp": { "type": "number" },
          "delegationStatus": {
            "$ref": "#/components/schemas/DelegationStatusType"
          },
          "estimatedGrossReward": { "type": "string" },
          "estimatedNetReward": { "type": "string" }
        },
        "required": [
          "txHash",
          "rewardAddresses",
          "amountDelegated",
          "delegationFee",
          "startTimestamp",
          "endTimestamp",
          "delegationStatus",
          "estimatedGrossReward",
          "estimatedNetReward"
        ]
      },
      "ListDelegatorDetailsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "delegators": {
            "type": "array",
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/CompletedDelegatorDetails" },
                { "$ref": "#/components/schemas/ActiveDelegatorDetails" },
                { "$ref": "#/components/schemas/PendingDelegatorDetails" }
              ],
              "discriminator": {
                "propertyName": "delegationStatus",
                "mapping": {
                  "active": "#/components/schemas/ActiveDelegatorDetails",
                  "pending": "#/components/schemas/PendingDelegatorDetails",
                  "completed": "#/components/schemas/CompletedDelegatorDetails"
                }
              }
            },
            "description": "The list of Delegator Details."
          }
        },
        "required": ["delegators"]
      }
    }
  }
}
